{
    "version": "https://jsonfeed.org/version/1",
    "title": "d2velop",
    "description": "",
    "home_page_url": "https://blog.d2velop.fr",
    "feed_url": "https://blog.d2velop.fr/feed.json",
    "user_comment": "",
    "author": {
        "name": "Cédric Gérard"
    },
    "items": [
        {
            "id": "https://blog.d2velop.fr/le-principe-dinjection-de-dependance/",
            "url": "https://blog.d2velop.fr/le-principe-dinjection-de-dependance/",
            "title": "Le principe d&#x27;injection de dépendance",
            "summary": "Le principe d’injection de dépendance (Dependency Injection ou DI) est le dernier principe SOLID. Il vise à réduire les dépendances directes entre les classes en permettant l’injection des dépendances nécessaires depuis l’extérieur. Selon Bob Martin, le principe d’injection stipule : Les modules de haut niveau&hellip;",
            "content_html": "<p>Le principe d’injection de dépendance (Dependency Injection ou DI) est le dernier principe SOLID. Il vise à réduire les dépendances directes entre les classes en permettant l’injection des dépendances nécessaires depuis l’extérieur.</p>\n<p>Selon Bob Martin, le principe d’injection stipule :</p>\n<p><em>Les modules de haut niveau ne doivent pas dépendre de modules de bas niveau. Les deux devraient dépendre des abstractions.</em></p>\n<p><em>Les abstractions ne doivent pas dépendre des détails. Les détails devraient dépendre des abstractions.</em></p>\n<p>Selon le principe DI, les dépendances d’une classe ne devraient pas être créées ou résolues à l’intérieur de cette classe elle-même. Au lieu de cela, les dépendances doivent être fournies de manière externe, généralement par le biais de constructeurs, de méthodes ou de propriétés, ce qui permet une plus grande flexibilité et facilite les tests et la réutilisabilité du code.</p>\n<p>Grâce à cette méthode, les dépendances ne sont plus exprimées statiquement (hard coded ou instancié dans la classe) mais dynamiquement à l’exécution. Cela nous permet de changer la valeur d’une dépendance pendant que le programme s’exécute. Par exemple, on peut injecter un algorithme de recherche différent en fonction du choix de l’utilisateur. On peut aussi injecter une implémentation particulière en fonction du contexte d’exécution, par exemple un “fake” d’un service externe en local ou en environnement de test.</p>\n<p>Prenons on exemple de code pour illustrer ce principe.</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-typescript\">\nclass UserService {\n  private database: Database;\n<br/>\n  constructor() {\n    this.database = new Database();\n  }\n<br/>\n  getUsers(): User[] {\n    return this.database.query('SELECT * FROM users');\n  }\n<br/>\n  saveUser(user: User): void {\n    this.database.insert('users', user);\n  }\n}\n        </code>\n    </pre>\n    <span class=\"toolbar\">TypeScript</span>\n</div>\n\n<p>Dans cet exemple, la classe <code>UserService</code> ne respecte pas le principe d’injection de dépendance. Elle crée directement une instance de la classe <code>Database</code> à l’intérieur de son constructeur. On crée ici une dépendance étroite entre les deux classes, rendant difficile le remplacement ou la substitution de la classe <code>Database</code> par une autre implémentation. De plus, cela complique la mise en place des tests unitaires, car nous ne pouvons pas facilement simuler ou substituer la classe <code>Database</code>. </p>\n<p>Voici tout simplement la version qui permet de résoudre ce problème :</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-typescript\">\nclass UserService {\n  private database: Database;\n<br>\n  constructor(database: Database) {\n    this.database = database;\n  }\n<br>\n  getUsers(): User[] {\n    return this.database.query('SELECT * FROM users');\n  }\n<br>\n  saveUser(user: User): void {\n    this.database.insert('users', user);\n  }\n}\n        </code>\n    </pre>\n    <span class=\"toolbar\">TypeScript</span>\n</div>\n\n<p>Dans cet exemple, nous avons mis en place l’injection par constructeur. La classe <code>UserService</code> reçoit une instance de <code>Database</code> lors de la création d’une nouvelle instance. Cela permet de fournir une implémentation spécifique de <code>Database</code> à la classe <code>UserService</code> lors de son instanciation. Cette pratique facilite également les tests unitaires en permettant de fournir une instance mock de <code>Database</code> lors des tests.</p>\n<p>Notre exemple s’appuie sur un langage typé statiquement. Le type à injecter (Database) est très souvent une interface qui explicite le contrat attendu par la classe cliente (UserService).</p>\n<p>Qu’en est-il pour un langage dynamiquement typé, pour lequel il n’est pas possible de définir une interface spécifique pour l’injection. Et bien dans ce cas, il est possible d’injecter n’importe quelle instance qui possède les mêmes méthodes que celles utilisées dans la classe cliente. Et c’est la responsabilité du développeur que le comportement soit correct.</p>\n<p>Voici la version du code précédent en Ruby :</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-ruby\">\nclass UserService\n  def initialize(database)\n    @database = database\n  end\n<br/>\n  def get_users\n    @database.query('SELECT * FROM users')\n  end\n<br/>\n  def save_user(user)\n    @database.insert('users', user)\n  end\nend\n        </code>\n    </pre>\n    <span class=\"toolbar\">Ruby</span>\n</div>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Ce principe favorise la flexibilité, la testabilité et la réutilisabilité du code en réduisant les dépendances directes entre les classes. Avec ce principe, une classe peut se concentrer sur sa responsabilité unique et n’a plus a créer les objets dont elle dépend. Il est la base l’inversion de contrôle, le concept qu’on retrouve dans toutes les architectures qui s’appuient sur le pattern Ports/Adapters.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/30/di.png",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Code"
            ],
            "date_published": "2023-06-26T09:00:00+02:00",
            "date_modified": "2023-06-26T09:00:00+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/le-principe-de-segregation-des-interfaces/",
            "url": "https://blog.d2velop.fr/le-principe-de-segregation-des-interfaces/",
            "title": "Le principe de ségrégation des interfaces",
            "summary": "Le principe de ségrégation des interfaces (Interface Segregation Principle ou ISP) est l’un des cinq principes SOLID de la programmation orientée objet. Il met l’accent sur la conception d’interfaces claires, spécifiques et cohérentes pour les clients, afin de minimiser les dépendances inutiles et de favoriser&hellip;",
            "content_html": "<p>Le principe de ségrégation des interfaces (Interface Segregation Principle ou ISP) est l’un des cinq principes SOLID de la programmation orientée objet. Il met l’accent sur la conception d’interfaces claires, spécifiques et cohérentes pour les clients, afin de minimiser les dépendances inutiles et de favoriser la modularité et la flexibilité du code.</p>\n<p>Selon le principe ISP, les clients (classes, modules, ou composants) ne devraient pas être forcés d’implémenter des fonctionnalités dont ils n’ont pas besoin. Au lieu de cela, les interfaces doivent être suffisamment spécifiques pour répondre exactement aux besoins des clients spécifiques.</p>\n<p>Prenons un cas concret :</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-typescript\">\ninterface MusicPlayer {\n    playMusic(): void;\n    stopMusic(): void;\n    displayLyrics(): void;\n}\n        </code>\n    </pre>\n    <span class=\"toolbar\">TypeScript</span>\n</div>\nVoici le contrat d'interface pour un lecteur de musique.\n\n<p>Maintenant, ajoutons deux lecteurs avec des implémentations et des cibles différentes.</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-typescript\">\nclass MobilePlayer implements MusicPlayer {\n    public playMusic(): void {\n        console.log(\"Playing music...\");\n    }\n<br/>\n    public stopMusic(): void {\n        console.log(\"Stopping music...\");\n    }\n<br/>\n    public displayLyrics(): void {\n        console.log(\"Displaying lyrics...\");\n    }\n}\n        </code>\n    </pre>\n    <span class=\"toolbar\">TypeScript</span>\n</div>\n\n<p>La première implémentation de notre contrat concerne un lecteur pour mobile. Ce lecteur support les trois fonctionnalités du contrat.</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-typescript\">\nclass Radio implements MusicPlayer {\n    playMusic(): void {\n        console.log(\"Playing music...\");\n    }\n<br/>\n    stopMusic(): void {\n        console.log(\"Stopping music...\");\n    }\n<br/>\n    displayLyrics(): void {\n        throw new Error(\"Radio doesn't support displaying lyrics.\");\n    }\n}\n        </code>\n    </pre>\n    <span class=\"toolbar\">TypeScript</span>\n</div>\n\n<p>Maintenant, c’est une radio, qui ne supporte pas l’affichage des paroles. Dans ce cas, la classe Radio est obligée de mettre en œuvre la méthode <code>displayLyrics</code> même si elle n’en a pas besoin. La classe Radio est forcée de fournir une implémentation vide ou de lancer une exception pour une fonctionnalité qui n’est pas pertinente pour elle. De plus, lancer une exception ici viole également le principe de Liskov, dont vous pouvez trouver une présentation dans <a href=\"https://blog.d2velop.fr/le-principe-de-substitution-de-liskov/\">l’article de la semaine dernière</a>, car on ne peut pas substituer la radio à tous les <code>MusicPlayer</code> sans causer de problème lors de l’appel à la méthode <code>displayLyrics</code>.</p>\n<p>Remanions un peu ce code afin de régler le problème et de respecter le principe ISP. La première étape consiste à séparer notre interface en deux.</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-typescript\">\ninterface MusicPlayer {\n    playMusic(): void;\n    stopMusic(): void;\n}\n<br/>\ninterface LyricsDisplay {\n    displayLyrics(): void;\n}\n        </code>\n    </pre>\n    <span class=\"toolbar\">TypeScript</span>\n</div>\n\n<p>Nous pouvons donc maintenant implémenter ces interfaces depuis nos deux lecteurs précédents.</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-typescript\">\nclass MobilePlayer implements MusicPlayer, LyricsDisplay {\n    playMusic(): void {\n        console.log(\"Playing music...\");\n    }\n<br/>\n    stopMusic(): void {\n        console.log(\"Stopping music...\");\n    }\n<br/>\n    displayLyrics(): void {\n        console.log(\"Displaying lyrics...\");\n    }\n}\n<br/>\nclass Radio implements MusicPlayer {\n    playMusic(): void {\n        console.log(\"Playing music...\");\n    }\n<br/>\n    stopMusic(): void {\n        console.log(\"Stopping music...\");\n    }\n}\n        </code>\n    </pre>\n    <span class=\"toolbar\">TypeScript</span>\n</div>\n\n<p>Dans cet exemple, nous avons divisé l’interface <code>MusicPlayer</code> en deux avec d’un part <code>MusicPlayer</code> et d’autre part <code>LyricsDisplay</code>. La classe <code>MobilePlayer</code> implémente les deux interfaces, car elle a besoin des fonctionnalités de lecture de musique et d’affichage des paroles. La classe Radio implémente uniquement l’interface <code>MusicPlayer</code>, car elle n’a pas besoin de la fonctionnalité d’affichage des paroles.</p>\n<p>Ainsi, en respectant le principe ISP, nous avons créé des interfaces spécifiques qui permettent aux clients de dépendre uniquement des fonctionnalités dont ils ont besoin, évitant ainsi d’avoir à implémenter des fonctionnalités inutiles. Nos deux implémentations sont bien interchangeables partout où l’on souhaite avoir un lecteur de musique.</p>\n<p>Ce principe s’applique particulièrement pour les langages typés statiquement (comme TypeScript). Bien que le problème puisse se retrouver également dans les langages typés dynamiquement (Ruby par exemple).</p>\n<p>Reprenons notre exemple, mais avec Ruby cette fois-ci. Dans le cas d’un langage typé dynamiquement, on ne peut pas créer d’interface pour définir un contrat et on n’a pas de type dans nos fonctions pour nous garantir ce qu’on doit avoir en paramètre ou en retour d’une fonction. En Ruby, on considère que toute instance qui répond aux attentes d’une fonction peut être utilisée. En d’autres termes, peu importe le type de l’élément passé en paramètre, si notre fonction à besoin d’appeler la méthode <code>foo</code> sur cet élément, alors toutes les instances de classes ou structure de données qui ont une méthode <code>foo</code> peuvent être substituée.</p>\n<p>Voici la première implémentation de lecteur mobile :</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-ruby\">\nclass MobilePlayer\n<br/>\n  def play_music\n    puts \"Playing music...\"\n  end\n<br/>\n  def stop_music\n    puts \"Stopping music...\"\n  end\n<br/>\n  def display_lyrics\n    puts \"Displaying lyrics...\"\n  end\n    <br/>\nend\n        </code>\n    </pre>\n    <span class=\"toolbar\">Ruby</span>\n</div>\n\n<p>En maintenant l’implémentation de la radio :</p>\n<div class='code-toolbar'>\n    <pre>\n        <code class=\"language-ruby\">\nclass Radio\n <br/>\n  def play_music\n    puts \"Playing music...\"\n  end\n<br/>\n  def stop_music\n    puts \"Stopping music...\"\n  end\n    <br/>\nend\n        </code>\n    </pre>\n    <span class=\"toolbar\">Ruby</span>\n</div>\n\n<p>Cette dernière ne propose une implémentation que pour les deux premières méthodes et ne peut donc pas afficher les paroles.</p>\n<p>En Ruby, ces deux classes sont parfaitement interchangeables pour les méthodes <code>play_music</code> et <code>stop_music</code>. En revanche, ce n’est pas le cas pour <code>display_lyrics</code> qui va provoquer une <code>NoMethodError</code> avec une instance de Radio. Ce n’est pas forcément un problème, car il n’y a pas de classe parente ici puisqu’il n’y a pas besoin de créer un contrat dans un langage typé dynamiquement. En revanche, pour éviter les bugs, il faut beaucoup de vigilance aux développeurs afin de ne pas se retrouver à utiliser une instance de classe dans un contexte auquel elle n’est pas adaptée. C’est pour cette raison qu’en Ruby (tout comme en JavaScript) on se retrouve avec beaucoup de programmation défensive. Dans le cas présent, pour l’affichage des paroles, on pourrait tester au préalable si notre instance répond à la méthode <code>display_lyrics</code> (<code>object.respond_to?(:display_lyrics)</code>) avant de l’appeler.</p>\n<p>En conclusion, on peut retenir que dans le cadre d’un langage typé statiquement, lorsqu’on définit des contrats explicites, il faut faire attention à avoir des contrats adaptés à nos clients. L’objectif étant de ne pas forcer des implémentations du contrat à produire du code inutilement. Pour un langage typé dynamiquement, on ne définit pas de contrat explicite. Donc il n’y a pas d’obligation d’implémenter des méthodes dont on n’a pas besoin. Il est plus facile de ne pas se retrouver à devoir fournir une implémentation de quelque chose sans en avoir le besoin. En revanche, il n’y a pas non plus d’assurance que le composant qu’on utilise est correcte. Il n’y a aucune garantie que les implémentations respectent bien un contrat particulier (nom et paramètre des fonctions ainsi que ce que la fonction retourne comme type de valeur). Cela met la rigueur des développeurs à rude épreuve et est souvent la cause des bugs d’une application.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/29/isp_title.png",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Code"
            ],
            "date_published": "2023-06-19T09:00:00+02:00",
            "date_modified": "2023-06-19T09:00:00+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/le-principe-de-substitution-de-liskov/",
            "url": "https://blog.d2velop.fr/le-principe-de-substitution-de-liskov/",
            "title": "Le principe de substitution de Liskov",
            "summary": "Troisième principe de l’ensemble SOLID, est le Principe de Substitution de Liskov, définit les conditions que doivent respecter les sous-classes lorsqu’elles sont utilisées à la place de leurs classes parentes. Ce principe a été formulé par Barbara Liskov en 1987. Il énonce que “Si S&hellip;",
            "content_html": "<p>Troisième principe de l’ensemble SOLID, est le Principe de Substitution de Liskov, définit les conditions que doivent respecter les sous-classes lorsqu’elles sont utilisées à la place de leurs classes parentes. </p>\n<p>Ce principe a été formulé par Barbara Liskov en 1987. Il énonce que “Si S est une sous-classe de T, alors les objets de type T peuvent être remplacés par des objets de type S sans altérer la cohérence du programme”. En d’autres termes, cela signifie que les sous-classes doivent pouvoir être utilisées de manière interchangeable avec leurs classes parentes, sans introduire d’erreurs ni de comportements inattendus.</p>\n<p>Prenons un exemple concret d’un code qui ne respect pas ce principe pour illustrer les problèmes que cela peut engendrer.</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/liskov_bad_1-2.png\" alt=\"Code qui utilise une implementation qui ne respect pas le principe de Liskov\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-2xl.png 1600w\">\n</figure>\n\n<p>Dans cet exemple, nous avons une fonction qui va prendre un dispositif capable de jouer de la musique. La fonction va lancer la musique, réaliser des opérations et enfin couper la musique. Cette même fonction utilise le retour du dispositif pour déterminer s’il y a une erreur et la gérer.</p>\n<p>Voyons maintenant le code des dispositifs.</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/liskov_bad_2.png\" alt=\"Interface MusicDevice et code d'un dispositif cassé\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-2xl.png 1600w\">\n</figure>\n\n<p>Ici, nous avons, tout d’abord, la définition de l’interface MusicDevice. Cette dernière permet de définir le contrat que doit respecter un dispositif musical. Ensuite, on le code d’un appareil cassé et qui n’est plus en mesure de lire de la musique.</p>\n<p>Dans cette implémentation, on a choisi de lever une exception lorsqu’il n’est pas possible de lire la musique. Le problème, c’est qu’ici notre erreur ne va pas être gérée par le gestionnaire d’erreur de la fonction qui lance la lecture de la musique. Pour qu’une erreur soit gérée, il faudrait que notre code retourne la valeur “false”. Il y a donc une différence de comportement entre ce que fait ce dispositif et d’autre qui vont respecter le contrat d’interface.</p>\n<p>Cette classe peut littéralement planter l’application avec une levée d’exception là où les appelants vont attendre un booléen pour gérer les cas d’erreurs. Notre dispositif cassé ne respectant pas le contrat qu’il étend alors il ne respect pas le principe de Liskov non plus. Dans ce cas, notre BrokenBluetoothSpeaker, n’est pas interchangeable avec n’importe quel MusicDevice sans altérer le comportement de l’application.</p>\n<p>Remanions maintenant ce code et ajoutons d’autre dispositif dans un contexte ou le principe de substitution de Liskov est respecté :</p>\n<p>Voici notre dispositif Bluetooth défectueux respectant le contrat en s’assurant de toujours retourner un booléen.</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/liskov_good_1.png\" alt=\"Code d'un dispositif bluetooth cassé\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-2xl.png 1600w\">\n</figure>\n\n<p>Voici deux autres dispositifs qui sont aussi des MusicDevice :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/liskov_good_2.png\" alt=\"Code d'un casque audio\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-2xl.png 1600w\">\n</figure>\n\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/liskov_good_3.png\" alt=\"Code d'un dispositif bluetooth fonctionnel\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-2xl.png 1600w\">\n</figure>\n\n<p>Dans cet exemple, l’ensemble des trois classes ci-dessus sont bien interchangeables ainsi qu’avec n’importe quel autre MusicDevice. Ces échanges peuvent se faire sans que cela ne pose de problème de fonctionnement au niveau de l’application. Cela ne générera pas de comportement imprévisible, car le contrat de la classe parente (ici notre interface MusicDevice) est respecté.</p>\n<p>Nous avons ici pris l’exemple d’un langage typé statiquement où le typage (interface) force quand même notre code à respecter un contrat définit à l’avance. Pour le casser nous avons du passer par la levée d’une exception. En revanche, si on regarde un langage où le typage ne nous aidera pas, il est beaucoup plus facile d’introduire des comportements imprévisibles.</p>\n<p>Prenons un exemple similaire, mais cette fois-ci en Ruby :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/ruby_liskov_bad_1-2.png\" alt=\"Code d'une application de musique en Ruby\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-2xl.png 1600w\">\n</figure>\n\n<p>Ici, nous avons un code simple qui va lire de la musique et la stopper à la fin du programme. Ce code va quand même vérifier que la musique est bien en train de jouer. Dans le cas contraire, elle va remonter une erreur.</p>\n<p>Prenons maintenant les implémentations des dispositifs suivantes :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/ruby_liskov_bad_2.png\" alt=\"Code d'une classe casque en Ruby\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-2xl.png 1600w\">\n</figure>\n\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/ruby_liskov_bad_3.png\" alt=\"Code d'une classe enceinte bluetooth en Ruby\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-2xl.png 1600w\">\n</figure>\n\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/28/ruby_liskov_bad_4.png\" alt=\"Code d'une classe enceinte bluetooth cassée en Ruby\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-2xl.png 1600w\">\n</figure>\n\n<p>Ici, nous n’avons aucun typage pour nous imposer un type de retour bien que ces trois classes étendent la même classe parente. On voit que chaque implémentation est faite d’une façon différente. La première décide de retourner un booléen, la deuxième retourne l’instance en cas de succès et nil s’il y a eu un problème. Enfin, la dernière lève une exception.</p>\n<p>Ces trois classes ne sont pas du tout interchangeables sans causer des incohérences dans l’exécution d’une application bien qu’elles soient du même type (MusicDevice). Il y a cependant des cas qui “tombent en marche”, comme la classe Headphone qui retourne false en cas d’erreur et la classe BluetoothSpeaker qui elle retourne nil. Notre application utilisant un “falsey check” supportera cette différence, mais c’est plus un coup de chance qu’un design réussi. Il est impossible de proposer une application qui manipule ces trois classes facilement et sans risque en s’appuyant sur la classe parente. Pour la gestion des erreurs, par exemple, il est indispensable de connaître les spécificités de chacune. Imaginer ce que cela peut donner avec des dizaines de dispositifs différents.</p>\n<p>Il n’y a pas de miracle ici, il faut de la rigueur du côté des développeurs pour éviter ce genre de problèmes et garantir un code robuste. Il y a aussi un moyen de s’appuyer sur les tests unitaires afin de valider les comportements. Je proposerai un article prochainement avec un exemple complet sur RSpec.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Le principe de substitution de Liskov est, au final, uniquement du bon sens. En effet, si j’ai un programme qui affiche des formes géométriques, il doit être capable d’afficher des ronds, des carrés et des triangles de la même façon du moment que ces trois formes soient toutes des formes géométriques du même type. Sans entendu, que les classes Circle, Square et Triangle héritent de Shape. De la même manière, je dois être capable d’ajouter la classe Rectangle et permettre à mon application de l’afficher sans avoir à modifier quoi que ce soit d’autre. </p>\n<p>Le non-respect de ce principe est à l’origine de beaucoup de souffrance dans la programmation orientée objet. C’est un problème bien plus difficile à suivre dans les langages qui ne bénéficient pas d’un typage statique.</p>\n<p>De manière générale, il faut toujours être vigilant lorsqu’on s’appuie sur l’héritage. Cela implique un couplage fort entre une classe et sa classe parente dont elle doit respecter scrupuleusement le comportement.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/28/liskov.png",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Code"
            ],
            "date_published": "2023-06-06T09:00:00+02:00",
            "date_modified": "2023-06-06T13:05:00+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/le-principe-ouvertferme/",
            "url": "https://blog.d2velop.fr/le-principe-ouvertferme/",
            "title": "Le principe Ouvert/Fermé",
            "summary": "Second principe appartenant à la gamme SOLID, le principe ouvert/fermé (Open/Closed principle) encourage la conception de logiciels extensibles sans nécessité de modifications directs sur le code existant. Le Principe Ouvert/Fermé est formulé par Bertrand Meyer et stipule : “Les entités logicielles (classes, modules, fonctions, etc.)&hellip;",
            "content_html": "<p>Second principe appartenant à la gamme SOLID, le principe ouvert/fermé (Open/Closed principle) encourage la conception de logiciels extensibles sans nécessité de modifications directs sur le code existant.</p>\n<p>Le Principe Ouvert/Fermé est formulé par Bertrand Meyer et stipule : “Les entités logicielles (classes, modules, fonctions, etc.) doivent être ouvertes à l’extension, mais fermées à la modification”. En d’autres termes, cela signifie que vous devez concevoir votre code de manière à ce qu’il puisse être étendu pour répondre à de nouveaux besoins ou fonctionnalités, sans avoir à modifier directement le code existant.</p>\n<p>Respecter ce principe est extrêmement puissant puisque les éléments de votre code deviennent interchangeables facilement et sans impact au-delà du composant qu’on ajoute. On peut voir ça comme le fait de remplacer une batterie de voiture par une plus performante, cela se fait sans avoir à démonter le moteur ni le moindre risque pour le reste des éléments… À condition de respecter les spécifications de la batterie.</p>\n<p>Prenons un cas concret pour illustrer les avantages de ce principe. Imaginons que nous ayons un système qui représente une machine à café. Cette machine permet de réaliser les cafés suivants :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/27/coffees.png\" alt=\"Classes représentant les cafés\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/27/responsive/coffees-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-2xl.png 1600w\">\n</figure>\n\n<p>Voici maintenant le code de la machine à café :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/27/coffee_machine.png\" alt=\"Code de la machine à caffé\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-2xl.png 1600w\">\n</figure>\n\n<p>On remarque que dans cette implémentation de la machine à café, on sera obligé de modifier cette classe à chaque modification concernant les cafés. Il faudra rajouter une clause dans la sélection pour introduire un nouveau café. Il faudra également modifier ce code si la façon de préparer un café change. Imaginons qu’on rajoute une étape à la préparation d’un cappuccino. Il faudra alors aller dans la classe machine à café pour introduire cette nouvelle étape. </p>\n<p>Ici, la machine à café, n’est pas fermée aux modifications. C’est le seul moyen d’étendre son comportement. Elle est également couplée à la préparation de chaque café.</p>\n<p>Voici maintenant un refactoring qui permet de suivre le principe ouvert/fermé en partant du même problème.</p>\n<p>Tout d’abord, on introduit une interface, Coffee, dont l’objectif est de garantir un contrat unique avec la machine à café.</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/27/coffee_interface.png\" alt=\"Interface pour les cafés\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-2xl.png 1600w\">\n</figure>\n\n<p>Maintenant, tout nos cafés vont implémenter cette interface et vont donc répondre au même contrat.</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/27/coffees_ref.png\" alt=\"Les cafés étendant l'interface Coffee\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-2xl.png 1600w\">\n</figure>\n\n<p>Vous remarquerez que seule la méthode qui vient de l’interface est publique. Les autres méthodes ont été passées en privé. En faisant cela, on encapsule les détails concernant chaque café dans leur propre classe.</p>\n<p>Voici maintenant l’impact sur notre machine à café :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/27/coffee_machine_ref.png\" alt=\"La nouvelle version de la machine à café\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-2xl.png 1600w\">\n</figure>\n\n<p>L’introduction de l’interface nous a permis de retirer toute la complexité de la préparation de chaque café de la classe. Maintenant, notre machine à café est protégée des modifications des autres classes. Je vous vois venir, vous allez me dire qu’on a toujours le bloc conditionnel pour la sélection d’un café. Donc, en ajoutant un nouveau type de café, on devra obligatoirement modifier le code de la machine à café.</p>\n<p>Je ne vais pas vous mentir, dans un cas celui-là, on aura toujours, quelque part, besoin de faire le lien entre le paramètre de la sélection et le café à préparer. Il aura donc besoin d’un bout de code similaire à celui-là pour le faire. </p>\n<p>Il y a néanmoins une amélioration intéressante à proposer pour la classe CoffeeMachine.</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/27/coffee_machine_ref2.png\" alt=\"La version SRP de la machine à café\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-2xl.png 1600w\">\n</figure>\n\n<p>Ici, on extrait simplement la sélection du café dans une classe dédiée. On introduit ce sélecteur comme une dépendance de la machine à café. Maintenant, quel que soit le changement qu’on introduit, ajout d’un nouveau style de café ou modification dans la préparation d’un café, il n’y aura plus d’impact sur la classe CoffeeMachine. Cette classe respect bien le principe Open/Close. Elle est ouverte à l’extension, on peut lui passer un autre type de sélecteur ou introduire de nouveau café facilement. En revanche, elle est fermée aux modifications qui viennent de l’extérieur. </p>\n<p>Notez au passage que ce refactoring nous a permis de respecter le Single Responsibility Principle dont je parle <a href=\"https://blog.d2velop.fr/le-principe-de-responsabilite-unique/\">ici</a>.</p>\n<p>Pour finir sur le code voici un exemple de sélecteur de café. Cette classe sera toujours dépendante de l’introduction de nouveau type de café et devra être modifiée en conséquence. Pour ce genre de classe, c’est un compromis qu’on fait. Cela ne pose pas de problème tant que la seule responsabilité de cette classe, c’est de faire le mapping entre un paramètre et la classe qu’elle doit fournir. </p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/27/coffee_selector.png\" alt=\"Le selecteur de café\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-2xl.png 1600w\">\n</figure>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Ce qu’il faut avoir en tête pour respecter ce principe, c’est qu’une entité logicielle doit pouvoir être impacté sans que son code n’ait besoin de changer. Pour ça, il faut que son comportement puisse être étendu. Dans le cas de notre machine à café, c’est l’introduction d’une interface commune à tous les cafés et d’un sélecteur qui nous permet d’étendre les capacités de notre machine sans avoir à modifier son propre code.</p>\n<p>Ce qui est intéressant dans cet exemple, pourtant simple, c’est que pour rendre le code compatible avec le principe ouvert/fermé nous avons du faire appel à des techniques de programmation qui correspondent aux trois derniers principes de SOLID. Nous verrons cela dans les posts à suivre sur le sujet.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/27/title.png",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Code"
            ],
            "date_published": "2023-05-30T09:00:00+02:00",
            "date_modified": "2023-05-30T09:00:00+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/le-principe-de-responsabilite-unique/",
            "url": "https://blog.d2velop.fr/le-principe-de-responsabilite-unique/",
            "title": "Le principe de responsabilité unique",
            "summary": "Le principe SOLID de responsabilité unique (Single Responsibility principle ou SRP) est un principe fondamental en programmation orientée objet (POO) qui stipule qu’une unité de code (UdC) ne devrait avoir qu’une seule responsabilité. Dit comme ça, ce principe semble simple à comprendre. Mais d’expérience, c’est&hellip;",
            "content_html": "<p>Le principe SOLID de responsabilité unique (Single Responsibility principle ou SRP) est un principe fondamental en programmation orientée objet (POO) qui stipule qu’une unité de code (UdC) ne devrait avoir qu’une seule responsabilité.</p>\n<p>Dit comme ça, ce principe semble simple à comprendre. Mais d’expérience, c’est certainement un des plus mal compris et maîtrisé. Par exemple, si je vous demande ce qu’on entend par “responsabilité”, qu’est-ce qui vous vient à l’esprit ?</p>\n<p>Régulièrement, on va dire que notre UdC ne doit être en charge que d’un seul traitement. Cette définition est tout aussi vague que la précédente. Une définition plus technique consiste à dire qu’une UdC ne doit avoir qu’une seule raison de changer. La encore, ce n’est pas évident de comprendre ce qu’on entend par la notion de changement. Est-ce qu’il s’agit seulement de l’ajout d’une fonctionnalité ? Un refactoring est-il considéré comme un changement ? Qu’en est-il de la monté de version d’un lib ?</p>\n<p>Pour mieux cerner ce principe, il faut comprendre que SRP est un principe qui concerne la répartition de la logique du code dans une application. En POO, on pourrait simplifier ça par le fait de savoir où mettre tel code dans telle classe ou module.</p>\n<p>En fait, et c’est <a href=\"https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\">Bob Martin qui le dit lui-même</a>, la meilleure question à se poser à ce sujet, c’est “A QUI?”. À qui est dédiée cette fonctionnalité ? Lorsqu’on est capable de répondre à cette question, si une UdC est en charge de répondre aux demandes de plus d’un profil d’utilisateur alors elle ne respect par le principe de responsabilité unique. Elle a donc autant de raison de changer qu’il y a de profils concernés par son utilisation.</p>\n<p>Prenons un exemple concret:</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\" src=\"https://blog.d2velop.fr/media/posts/26/no_srp_ruby-3.png\" alt=\"no srp Ruby code\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-2xl.png 1600w\">\n    <figcaption>Code qui ne respecte pas SRP</figcaption>\n</figure>\n\n<p>Le classe ci-dessus présente quatre méthodes, chacune d’elles a un rôle bien défini. Il y en a une pour calculer la paie d’un salarié, une pour afficher le résultat, une pour récupérer le nombre d’heures travaillées par le salarié et enfin une pour sauvegarder le salarié en base de données.</p>\n<p>Ici, chacune des méthodes est liée à un profil d’utilisateur différent. Le calcul de la paie est lié à la finance, l’affichage de la paie est de la responsabilité des ressources humaines, le reporting du temps de travail est le rôle des manager et enfin la sauvegarde en DB est de la responsabilité de l’équipe technique.</p>\n<p>Si on se réfère à notre définition, quelques lignes plus haut, cette implémentation ne respect pas le principe de responsabilité unique. En effet, cette classe va changer selon l’évolution des besoins de ce quatre utilisateurs. Il y a donc bien quatre origines possibles à l’évolution de cette classe et elle à finalement plusieurs raisons de changer.</p>\n<p>Pourtant, à première vue, cette classe semble tout à fait correcte. Alors comment faire si on souhaite respecter ce principe. Voici un exemple de code qui peut vous aider à y voir plus clair :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\"  src=\"https://blog.d2velop.fr/media/posts/26/srp_ruby_employee.png\" alt=\"srp Ruby code\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-2xl.png 1600w\">\n    <figcaption>Classe pour représenter un employé</figcaption>\n</figure>\n\n<p>Ici, on réduit la classe Employee à un simple value object sans logique. La logique va être déplacée dans d’autres classes, chacune sera dédiée à une responsabilité. Voici un exemple de découpage :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\"  src=\"https://blog.d2velop.fr/media/posts/26/srp_ruby_pay.png\" alt=\"srp Ruby code\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-2xl.png 1600w\">\n    <figcaption>Classes en charge de gérer la paie</figcaption>\n</figure>\n\n<p>Vous remarquerez ici qu’on fournit deux classes pour calculer la paye. Ces classes, qui implémentent le même contrat (PayCalculator) permettent de remplacer le <em>if</em> de la fonction de calcul de la version précédente.</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\"  src=\"https://blog.d2velop.fr/media/posts/26/srp_ruby_save.png\" alt=\"srp Ruby code\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-2xl.png 1600w\">\n    <figcaption>Classes pour la persistence et le reporting</figcaption>\n</figure>\n\n<figure class=\"code_img\">\n    <img loading=\"lazy\"  src=\"https://blog.d2velop.fr/media/posts/26/printer_srp_ruby.png\" alt=\"srp Ruby code\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-2xl.png 1600w\">\n    <figcaption>Classe pour l'affichage en console de la paye</figcaption>\n</figure>\n\n<p>Voici les trois dernières responsabilités qui ont été sortie. Un repository est en charge de la persistance des employés, un reporter se charge de calculer le temps de travail effectif en fonction du planning et enfin une classe qui permet d’afficher une paye en console.</p>\n<p>Premier constat, on a plus de fichiers au bout du compte. Chaque fichier reste simple correspond à une intention bien particulière qu’il est facile de comprendre. Ici, chaque fichier est à mettre en face d’un profil d’utilisateur et n’a donc qu’une seule raison de changer.</p>\n<p>D’un point vu technique, il est plus facile de faire évoluer le code de la deuxième version, car un changement dans l’une des classes ne pourra pas avoir d’impact sur les autres. On peut facilement remplacer une classe par une autre si on veut faire évoluer notre besoin. C’est le cas pour le calcul de la paye, mais on pourrait faire de même avec le pointer pour imprimer une fiche de paie ou envoyer le résultat par email par exemple.</p>\n<p>Voici un petit exemple d’un calcul de paie qui s’appuie sur le découpage de nos responsabilités :</p>\n<figure class=\"code_img\">\n    <img loading=\"lazy\"  src=\"https://blog.d2velop.fr/media/posts/26/ruby_payroll_srp.png\" alt=\"srp Payroll\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-2xl.png 1600w\">\n</figure>\n\n<p>En conclusion, SRP, est un principe qui permet de garantir que le code est correctement reparti dans des UdC qui facilitent la lecture, le test et les modifications à venir. En revanche, on se retrouve avec beaucoup plus de fichiers par rapport à une approche traditionnelle basée sur les concepts réels (e.g. Employee). </p>\n<p>Je vous invite à avoir ce principe en tête lorsque vous codez. Le gain apporté par son utilisation en termes de maintenance et d’évolution en vaut vraiment le coup.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/26/srp_title.png",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Code"
            ],
            "date_published": "2023-05-18T22:59:00+02:00",
            "date_modified": "2023-05-19T14:22:49+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/principes-solid-intro-2/",
            "url": "https://blog.d2velop.fr/principes-solid-intro-2/",
            "title": "Principes SOLID - Intro",
            "summary": "Les principes SOLID sont un ensemble de cinq principes de conception logicielle qui ont été développés par Robert C. Martin, également connu sous le nom d'Oncle Bob. Ils ont été formulés pour aider les développeurs à créer des logiciels qui sont faciles à comprendre, à modifier&hellip;",
            "content_html": "<p>Les principes SOLID sont un ensemble de cinq principes de conception logicielle qui ont été développés par Robert C. Martin, également connu sous le nom d'Oncle Bob. Ils ont été formulés pour aider les développeurs à créer des logiciels qui sont faciles à comprendre, à modifier et à maintenir.</p>\n<p>Il y a un principe pour chaque lettre de l'acronyme SOLID :</p>\n<ol>\n<li>\n<p>Le principe de responsabilité unique (<strong>S</strong>RP: Single Responsibility Principle) : Une classe ne devrait avoir qu'une seule raison de changer.</p>\n</li>\n<li>\n<p>Le principe d'ouverture/fermeture (<strong>O</strong>CP: Open/Close Principle) : Les entités logicielles (classes, modules, fonctions, etc.) devraient être ouvertes à l'extension mais fermées à la modification.</p>\n</li>\n<li>\n<p>Le principe de substitution de Liskov (<strong>L</strong>SP: Liskov Substitution Principle) : Les objets d'une classe dérivée devraient pouvoir être substitués à la place des objets de la classe de base sans altérer la cohérence du programme.</p>\n</li>\n<li>\n<p>Le principe de ségrégation d'interface (<strong>I</strong>SP: Interface Segregation Principle) : Les clients ne devraient pas être forcés d'implémenter des interfaces qu'ils n'utilisent pas.</p>\n</li>\n<li>\n<p>Le principe d'inversion de dépendance (<strong>D</strong>IP: Dependency Injection Principle) : Les modules de haut niveau ne devraient pas dépendre des modules de bas niveau. Les deux devraient dépendre d'abstractions.</p>\n</li>\n</ol>\n<p>Voici quelques-uns des avantages de l'application des principes SOLID en programmation orientée objet :</p>\n<ol>\n<li>\n<p><strong>Une meilleure organisation du code</strong> : Les principes SOLID permettent d'organiser le code de manière à ce qu'il soit facile à comprendre et à modifier. En appliquant le SRP, par exemple, vous vous assurez que chaque classe n'est qu'une seule raison de changer ce qui facilite la compréhension et la modification du code.</p>\n</li>\n<li>\n<p><strong>Une meilleure maintenabilité</strong> : En appliquant les principes SOLID, vous pouvez rendre votre code plus facile à maintenir. En suivant le principe OCP, par exemple, vous pouvez étendre les fonctionnalités de votre logiciel sans avoir à modifier le code existant. Cela rend les changements plus simples et limite les bugs.</p>\n</li>\n<li>\n<p><strong>Une meilleure évolutivité</strong> : En appliquant les principes SOLID, vous pouvez rendre votre code plus facile à étendre. En suivant le principe ISP, par exemple, vous pouvez créer des interfaces spécifiques à chaque client, ce qui vous permet de faire évoluer votre logiciel en fonction des besoins de chaque client sans avoir à modifier le code existant.</p>\n</li>\n<li>\n<p><strong>Une meilleure testabilité</strong> : Les principes SOLID permettent de rendre votre code plus facile à tester. En suivant le principe LSP, par exemple, vous pouvez vous assurer que vos classes dérivées sont conformes aux contrats de leurs classes de base, ce qui facilite les tests unitaires.</p>\n</li>\n</ol>\n<p>Ces principes font aujourd'hui parti des fondamentaux de la programmation orientée objet. Ils peuvent aider les développeurs à créer des logiciels plus faciles à comprendre, à modifier, à maintenir et à tester.</p>\n<p> </p>",
            "image": "https://blog.d2velop.fr/media/posts/24/solid.png",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Code"
            ],
            "date_published": "2023-05-12T09:00:00+02:00",
            "date_modified": "2023-06-25T00:12:38+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/im-back/",
            "url": "https://blog.d2velop.fr/im-back/",
            "title": "I&#x27;m back",
            "summary": "Il y a plus d’un an et demi maintenant, j’ai arrêté le mentorat avec D2velop faute d’énergie. Je pensais pouvoir continuer à écrire des articles régulièrement, mais finalement j’ai également abandonné cette activité. Aujourd’hui, je suis plus posé et je compte me remettre à publier&hellip;",
            "content_html": "<p>Il y a plus d’un an et demi maintenant, j’ai arrêté le mentorat avec D2velop faute d’énergie. Je pensais pouvoir continuer à écrire des articles régulièrement, mais finalement j’ai également abandonné cette activité.</p>\n<p>Aujourd’hui, je suis plus posé et je compte me remettre à publier toutes les semaines sur le blog. Pour la reprise, je vais me lancer dans une série d’articles sur les principes SOLID.</p>\n<p>J’espère pouvoir vous éclairer sur ce sujet et vous aider à produire un code de meilleure qualité.</p>\n<p>Pour ce retour, j’ai décidé de refondre entièrement le site afin qu’il soit plus moderne et facile à maintenir. J’en profite pour passer une petite annonce : si vous avez la volonté de partager vos connaissances par l’écriture, mais que vous ne souhaitez pas gérer un site, je serai ravi de vous aider à passer le cap et à publier vos écrits sur D2velop.</p>\n<p>Je vous dis à bientôt.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/25/cgerard_A_terminator_like_men_Schwarzenegger_with_sunglasses_ge_76cbd3a8-a12c-4b6a-a704-9c538b99523f.png",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
            ],
            "date_published": "2023-05-10T23:00:00+02:00",
            "date_modified": "2023-05-29T23:01:36+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/savoir-arreter/",
            "url": "https://blog.d2velop.fr/savoir-arreter/",
            "title": "Savoir arrêter",
            "summary": "Il y a des moments où il faut savoir se lancer dans des projets, prendre son courage à deux mains, sa motivation et sauter le pas. Ce n’est pas évident. Mais ça l’est encore moins lorsqu’il faut prendre la décision d’arrêter. Savoir dire stop est&hellip;",
            "content_html": "<p>Il y a des moments où il faut savoir se lancer dans des projets, prendre son courage à deux mains, sa motivation et sauter le pas. Ce n’est pas évident. Mais ça l’est encore moins lorsqu’il faut prendre la décision d’arrêter.</p>\n<p>Savoir dire stop est pourtant indispensable afin de se préserver. Il y a des projets ou s’entêter coûte beaucoup plus d’énergie que ce que ça nous apporte. À la fin, le bilan est négatif et c’est notre santé qui va en pâtir. Attention, le retour sur investissement n’est pas toujours pécunier. On peut trouver dans la satisfaction, dans l’accomplissement et dans la reconnaissance bien plus que dans l’argent. Il faut néanmoins que cela soit à la hauteur de l’effort fourni.</p>\n<p>Lorsque j’ai lancé d2velop j’avais une ambition, je voulais transmettre ce que j’avais appris pendant mes années de pratique. Je voulais également répondre à une problématique que j’avais perçue sur le marché de l’emploi, l’inadéquation entre l’offre et le demande pour le recrutement des devs.</p>\n<p>Mon constat, c’était qu’on a besoin de développeurs, mais pas de codeurs. Les entreprises ont moins besoin de techniciens qui maîtrisent des outils (langage, framework) que de développeurs qui ont des connaissances dans les techniques de développement logiciel. Seulement, quasiment toutes les formations courtes, en lignes, les bootcamp de reconversion qu’on trouve aujourd’hui forment par les outils. Le résultat, c’est que les juniors qui arrivent sur le marché n’ont pas les compétences attendues. Cela pose de réels problèmes d’insertion et des difficultés dans les recrutements.</p>\n<p>Je voulais offrir un accompagnement pour les juniors qui sortent tout juste de formation. Ce mentorat se voulait dédié à la transmission des connaissances qui sont zappées par ces formations, l’algorithmie, la compréhension du matériel, le cloud, l’architecture logiciel, les tests, la POO, le travail en équipe et bien plus encore.</p>\n<p>J’ai donc monté un groupe en intégrant des développeurs juniors pour tester mon offre. Après pas mal de galères et de fatigue, je suis arrivé à une version qui semblait pouvoir marcher et qui correspondait aux attentes des mentorés. Il m’aura fallu presque deux ans et beaucoup d’investissement pour arriver à ce résultat.</p>\n<p>Aujourd’hui, pourtant, je vais arrêter le mentorat. Bien que le concept semble bon et qu’il y ai de la demande, ça ne prend pas. J’ai beau avoir rassemblé un groupe de 8 personnes à suivre, la participation ne décolle pas. J’ai fait plusieurs coding dojo avec seulement une seule participante. Il y a peu d’échange sur le Discord du groupe et si je n’anime pas, il ne se passe rien. Même en partageant sur le groupe il n’y a pas vraiment eu d’échange en retour.</p>\n<p>Je pense clairement que je n’ai pas été assez bon animateur et que je n’ai pas réussi à mettre l’énergie qu’il faut pour que ce projet décolle. Animer un groupe et transmettre demande beaucoup d’énergie et un investissement conséquent. Avec un travail à temps plein et une vie de famille, je n’ai pas pu suffisamment m’investir pour créer l’émulsion nécessaire.</p>\n<p>Je ne me considère pas comme unique responsable de cette situation. J’ai également été découragé par les inscriptions qui sont restées sans suite après de nombreux échanges. J’ai été découragé par le non-investissement des gens lors des événements et sur le groupe. Clairement, je pense qu’une grande majorité de dev juniors n’a pas conscience de l’effort à fournir pour devenir un bon développeur ou ne cherche tout simplement pas à le devenir. Leur but, c’est de décrocher un job, et ils ont tendance à considérer ça plus comme une finalité que comme un point de départ.</p>\n<p>Une autre erreur est de proposer cela gratuitement. Je m’adresse à des gens qui n’ont pas beaucoup de moyens et je prenais du plaisir à créer les contenus et à animer les formations et les dojos. Le problème, c’est que lorsqu’on ne paie pas, on ne s’investit pas forcément. De point de vue de l’animateur, lorsqu’il n’est pas rémunéré à sa juste valeur, les moments difficiles, ceux où le plaisir n’est plus là, ceux où il y peu de retours, sont difficiles à surmonter.</p>\n<p>C’est suite à ces constats que je décide d’arrêter le mentorat avec d2velop. En priorisant ce qui est important pour moi, je me rends compte que je n’ai ni l’énergie, ni le temps pour continuer. Je ne retire plus rien des efforts que je pourrai fournir et je veux mieux valoriser mon temps sur d’autres projets.</p>\n<p>Je compte conserver le blog de d2velop qui me servira à publier des articles régulièrement. Je n’abandonne pas du tout mon ambition d’aider les développeurs juniors à entrer sur le marché du trabail. Seulement cette fois-ci, je compte m’attaquer directement au problème au niveau de la formation.</p>\n<p>On se retrouve bientôt pour un tout nouveau projet.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/23/youtuber-2838945_1280.jpg",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Développeur Mindset"
            ],
            "date_published": "2022-01-27T09:00:00+01:00",
            "date_modified": "2023-05-10T00:03:58+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/les-microservices/",
            "url": "https://blog.d2velop.fr/les-microservices/",
            "title": "Les microservices",
            "summary": "Depuis quelques années, on entend beaucoup parler de microservices. Mais qui a-t-il réellement dernière cette dénomination ? Et surtout qu’est-ce que cela implique sur un projet ? Les microservices sont à la mode depuis quelques années. Ils ont été popularisés par des géants comme Netflix&hellip;",
            "content_html": "<p>Depuis quelques années, on entend beaucoup parler de microservices. Mais qui a-t-il réellement dernière cette dénomination ? Et surtout qu’est-ce que cela implique sur un projet ?</p>\n<h3 id=\"un-effet-de-mode-\">Un effet de mode ?</h3>\n<p>Les microservices sont à la mode depuis quelques années. Ils ont été popularisés par des géants comme Netflix ou Amazon, pour ne citer qu’eux, qui communiquent beaucoup sur leurs solutions techniques. Comme souvent chaque communication ou projet open source lancée par ce genre de géant à tendance à créer un effet de mode qui est souvent repris dans les startups du moment.</p>\n<p>Cela n’a pas manqué pour les microservices qui se sont vu présenter comme la solution ultime à tous les soucis des applications actuelles en terme de scalabilité, de couplage et de maintenabilité.</p>\n<h3 id=\"microservices-quésaco-\">Microservices, quésaco ?</h3>\n<p>Tout d’abord, que met-on derrière miroservice ? En fait, il ne s’agit pas d’une grande révolution par rapport à ce qu’on était capable de faire à l’époque. Il s’agit d’une variante des architectures orientées services (SOA – service-oriented architecture) avec comme particularité de découpé les services le plus finement possible. Avant cette approche, les solutions étaient déjà découpées afin de gérer la scalabilité de chaque partie spécifiquement. Le principe des microservices tient dans le terme « micro ». Ces derniers doivent être le plus petit possible et le plus simple possible. La conséquence est qu’on se retrouve vite avec un grand nombre de services à déployer et maintenir.</p>\n<p>Dans les faits, pas de révolution, il s’agit d’une approche architecturale différente de ce qu’on faisait auparavant. Cette approche a été rendue possible avec deux évolutions techniques majeurs au niveau infrastructure et déploiement. La première, c’est le développement du cloud et des services d’hébergements. La deuxième est la conteneurisation des applications. Comme je vous l’ai expliqué au paragraphe précédent, avec les microservices on se retrouve à déployer beaucoup d’unité et on doit être capable de gérer les déploiements de chaque service indépendamment. Docker et les plateformes cloud comme AWS, Azur et Google Cloud ont ouvert la voie avec des outils permettant de répondre à ces besoins.</p>\n<p>Quand on parle de beaucoup de services, il faut voir ce découpage comme le plus petit possible d’un point de vue technique et le plus proche possible du métier. En gros, on se retrouve avec au minimum un service par fonctionnalité. Bien souvent, les contraintes techniques ou les dépendances externes amènent à avoir plusieurs services pour une seule fonctionnalité. Au final, notre application peut compter plusieurs dizaines de services dans les cas simples et plusieurs centaines pour un gros projet. Cela demande d’avoir une plateforme de déploiement qui tient la route et un monitoring au top.</p>\n<p>Il reste une dernière problématique qui est la communication entre ces services. Dans la plupart des cas, les services ne sont pas tous au même niveau. Vous allez, par exemple, avoir une API comme point d’entrée ou une application en front. Et les appels vont déclencher tout un enchaînement d’actions dans vos services pour aboutir au résultat attendu. Il y a une grosse partie d’échange entre ces derniers qui apporte un autre niveau de complexité. En effet, votre application ne doit pas planter si un service et hors d’usage. Vous devez être capable de tracer les échanges et reproduire les actions afin d’éviter les pertes de données et pouvoir comprendre les comportements en production. Pour cela, on utilise des “message brocker” (Kafka, RabbitMQ, etc.) pour gérer les échanges et la synchronisation des services. Cette partie est souvent celle qui est négligée et encore plus souvent sous-estimée, mais c’est pourtant la plus critique. Il faut bien comprendre que votre brocker va acheminer une importante quantité de messages. Avoir plusieurs millions de messages par jours n’est pas rare sur une application de taille normale.</p>\n<h3 id=\"la-solution-ultime-\">La solution ultime ?</h3>\n<p>Pour être honnête, je n’ai jamais vu un système conçu sur la base de microservice bien conçu. J’ai à chaque fois, sois eu un surcoût monstrueux en maintenance à cause de mauvais choix techniques ou un découpage raté qui aboutit plutôt à des macroservices. Dans le dernier cas, on se retrouve avec la complexité des microservice et la lourdeur d’une application monolithique. C’est certainement ça qui a fait la mauvaise réputation des systèmes distribués à une époque pas si lointaine.</p>\n<p>Au final est-ce que le coût des microservices en vaut la peine. Je dirai que dans 95 % des cas, non. Il faut comprendre que les microservice répondent principalement à des problématiques de scalabilité par une optimisation des déploiements. La capacité de scaler unitairement et dynamiquement chaque service est un besoin assez rare qu’on retrouve chez les géants du numérique. Les besoins de Netflix ou Facebook sont à des années-lumière de ce qu’on peut retrouver dans les projets communs même s’ils paraissent énormes.</p>\n<p>Le problème des microservices et qu’ils nécessitent dès le début une infrastructure lourde, qu’ils ajoutent un surcoût non négligeable sur les aspects synchronisation entre services et qu’ils sollicites beaucoup plus la couche réseau. </p>\n<p>Au-delà de la scalabilité on vente les microservices pour résoudre des problèmes de couplage dans une application. Je suis personnellement en désaccord avec cette affirmation. Dans les faits, les microservice s’intéressent au découpage d’une application et offrent des opportunités au niveau du déploiement d’une solution, ils ne changent pas grand-chose côté code. Vous pouvez avoir autant de couplage entre de services distribués que dans un monolithe. Et à l’inverse avoir un monolithe qui ne souffre d’aucun problème de couplage et qui d’ailleurs pourrait être découpé facilement par la suite si besoin. Il faut aussi avoir en tête que même si les microservice permettent une gestion plus fine des déploiements ils coûte aussi beaucoup plus cher niveau infrastructure.</p>\n<h3 id=\"ma-vision-des-microservices\">Ma vision des microservices</h3>\n<p>Si d’aventure vous voulez quand même vous lancer voici les conseils que je pourrais donner suite à mes retours d’expériences:</p>\n<ul>\n<li><p>Découper votre application en services en fonction de vos contextes métier et le plus finement possible. Un service ne doit avoir qu’une seule responsabilité</p>\n</li>\n<li><p>Créer un service pour encapsuler chaque dépendance externe</p>\n</li>\n<li><p>Vos services doivent exposer des contrats clairs tant concernant les API que les messages qui passent par votre brocker. Il est nécessaire de définir ces contrats dès le début (c’est un moyen d’éviter les couplages implicites)</p>\n</li>\n<li><p>Penser que dans les microservices on privilégie la remplaçabilité à l’évolutivité. J’entends par là que, contrairement à un monolithe, on ne va pas forcément modifier une service existant pour changer son comportement, mais plutôt coder un nouveau service qui le remplacera à terme. Ainsi, il n’y a pas de risque de casser l’existant et le rollback est facile à automatiser via l’orchestrateur de services. Vous comprendrez que cette technique n’est faisable que si vos interfaces de services sont contractualisées et ce n’est rentable que si vos services sont « micro ». Je peux illustrer ce point avec un service de cartographie. Vous avez un service existant qui se base sur GoogleMap. Vous décidez pour de changer pour le service HereMap. Vous ne faites pas de modification dans le service existant. Vous allez implémenter un nouveau service qui utilise HereMap et qui va implémenter le même contrat que l’ancien. Ensuite, vous remplacerez l’ancien service au déploiement</p>\n</li>\n<li><p>Concernant vos messages, ils doivent être le plus précis possible. Par exemple, si vous avez un service qui gère vos clients. Lors d’une mise à jour de l’e-mail, il ne faut pas envoyer un message de mise à jour avec comme payload tout le client. Une bonne pratique serait d’envoyer un message avec uniquement l’information de ce qui a été changée</p>\n</li>\n<li><p>Conteneuriser vos services dès le début</p>\n</li>\n</ul>\n<p>En conclusion, pour un nouveau projet, je n’opterai pas pour les microservices dès le début. Je commencerai par un monolithe en m’appuyant sur des pratiques comme les DDD, BDD ainsi que sur l’architecture hexagonale pour éviter le couplage et définir les contextes métiers de mon application. Avec cette approche, il est toujours possible de sortir un contexte dans son propre service plus tard pour répondre à un problème particulier de déploiement ou de scalabilité unitaire. Il est très rare d’atteindre les limites d’une application monolithique même sur un gros service. La plupart du temps, c’est l’état du code qui est la cause des limitations et non la typologie de la solution.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/22/network-3849202_1280.webp",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Code"
            ],
            "date_published": "2022-01-21T09:00:00+01:00",
            "date_modified": "2023-05-08T21:22:44+02:00"
        },
        {
            "id": "https://blog.d2velop.fr/la-confiance/",
            "url": "https://blog.d2velop.fr/la-confiance/",
            "title": "La confiance",
            "summary": "Vous l’avez sans doute remarqué, mais on parle beaucoup du syndrome de l’imposteur en ce moment, et pas mal chez les développeurs juniors qui ne sentent pas à leur place. C’est effectivement un sentiment qu’on peut avoir lorsqu’on a pas assez confiance en ses capacités.",
            "content_html": "<p>Vous l’avez sans doute remarqué, mais on parle beaucoup du syndrome de l’imposteur en ce moment, et pas mal chez les développeurs juniors qui ne sentent pas à leur place.</p>\n<p>C’est effectivement un sentiment qu’on peut avoir lorsqu’on a pas assez confiance en ses capacités. Le problème, c’est que ce n’est pas réservé aux juniors. Dans le cadre d’une reconversion « rapide », il parait évident que la différence de niveau entre ce qui est attendu sur le marché et ce qu’on a acquis en formation peut amener à douter de soi. Mais au-delà de ça le manque de confiance se retrouve à tous les niveaux d’expériences.</p>\n<p>On peut manquer de confiance lors d’une prise de poste, lors d’un changement de projet, d’un changement d’environnement technique. Bref, lors d’un changement, quoi. On peut aussi ne jamais obtenir cette précieuse confiance en soi et survire dans le milieu professionnel en espérant que personne en découvre qu’au final nous n’avons pas le niveau suffisant.</p>\n<p>À moins que toutes les personnes, formateurs et collègues que nous ayons côtoyé nous aient prouvé que nous sommes mauvais, le problème vient de nous. Il s’agit simplement de la perception que nous avons de nous-même au regard des attentes des autres. C’est extrêmement difficile d’être objectif là-dessus, encore plus si vous avez tendance à être dur avec vous-même.</p>\n<p>Alors comment peut-on faire pour bâtir sa confiance en soi ? Je ne suis pas psychologue donc je vais me contenter de parler de ce que je connais et du métier de développeur. Il s’agit ici d’un contexte précis et de retour basé sur ma propre expérience.</p>\n<p>Tout d’abord, il faut comprendre que le métier de développeur est un métier où on est souvent très exposé. J’entends par là que le code, l’application ou la solution que l’on produit sera jugé dans tous les sens et par tout un paquet de personnes. Vous allez avoir des retours d’utilisateurs lors de feedback, de vos collègues développeurs lors des revues de code ou en pair programming, de POs et autres lors des phases de QA, etc. Bref vous aller être jugé en permanence.</p>\n<p>En fait, non, et ça, j’ai mis un moment (3/4 ans) à le comprendre. Les gens ne vous jugent pas vous ! Ils jugent uniquement le résultat d’un travail (qui est bien souvent collectif) au regard d’attente métier et d’objectifs précis. Il faut aussi comprendre que ce que vous produisez ne vous appartient pas. Le code est un tout dans lequel tout le monde travail, vous ne devez pas vous l’approprier. Il faut avoir conscience que tout le monde doit pouvoir reprendre votre travail et comprendre ce que vous avez fait. Nous produisons en permanence pour les autres et non pour nous-même.</p>\n<p>Lorsqu’on a compris cela, on peut se détacher du jugement des autres. On prend du recul sur ce qu’on produit et on devient capable d’accepter un retour (même s’il est maladroit) pour ce qu’il peut nous apporter de positif. C’est comme cela qu’on s’améliore en réalité.</p>\n<p>La confiance, elle se bâtit en se confrontant aux autres. Il ne faut pas hésiter à aller à la rencontre de personnes qualifiées et surtout reconnues dans le milieu pour échanger. Il faut participer à des projets d’équipe. Il faut montrer son code et demander des revues pour avoir des retours concrets sur nos pratiques. Il faut faire du pair programming avec des développeurs plus compétents que nous pour apprendre en live. En résumé, il faut s’exposer et accueillir les retours en prenant tout ce qui nous fera avancer.</p>\n<p>Je vois souvent des dev juniors qui demandent un retour sur un projet un donnant le lien de l’application ou en envoyant des captures de l’interface. Je vais être clair, si votre objectif, c’est le design, c’est ok, si c’est de l’intégration web, c’est déjà limite, mais pour du dev ça ne sert à rien du tout. Vous n’apprendrez pas grand-chose avec des retours qui seront très subjectifs sur votre page d’accueil.</p>\n<p>Il faut montrer du code, proposer le dépôt GitHub et demander une revue du projet afin d’avoir des retours constructifs sur l’architecture, les patterns, les problèmes de couplages, les dépendances, les tests, etc. Au fur et à mesure que vous vous améliorez, les retours seront de moins en moins nombreux et ça, c’est bon pour la confiance.</p>\n<p>Un autre bon moyen de gagner en confiance et de se mettre dans la peau du relecteur. Passer du temps à lire le code des autres permet de se positionner par rapport à d’autres développeurs. Il est évident qu’au début, on ne comprend pas grand-chose et que ce n’est pas facile de faire des commentaires intéressants. Mais c’est un excellent moyen d’apprendre en démystifiant certaines pratiques et en posant des questions. Encore une fois et avec l’expérience, on fait de plus en plus de retour pertinents. Lorsque l’on prend conscience de l’influence qu’on a sur une pull request ou les choix des autres, on gagne énormément en confiance.</p>\n<p>Il faut garder à l’esprit qu’au royaume des aveugles les borgnes sont rois, j’entends pas là que si vous êtes continuellement entouré de bras cassés et bien vous allez passer pour l’expert même en étant très moyen. Vous allez donc bâtir une fausse estime de vous et cela peut parfois conduire à tomber de haut.</p>\n<p>Mes derniers conseils sont de s’inspirer de personnes compétentes et de trouver un ou des mentors qui partage leurs expériences, de lire des livres qui sont des références en terme de pratique technique, de vous former continuellement et de toujours savoir vous remettre en question. Vous pouvez également intégrer des communautés de dev et participer à des événements lors de meetup. Le mieux étant de diversifier ses actions afin de progresser, gagner en confiance et entretenir son réseau.</p>\n",
            "image": "https://blog.d2velop.fr/media/posts/21/cat-5690627_1280.webp",
            "author": {
                "name": "Cédric Gérard"
            },
            "tags": [
                   "Développeur Mindset"
            ],
            "date_published": "2022-01-12T09:00:00+01:00",
            "date_modified": "2023-05-08T21:17:18+02:00"
        }
    ]
}
