<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>d2velop</title>
    <link href="https://blog.d2velop.fr/feed.xml" rel="self" />
    <link href="https://blog.d2velop.fr" />
    <updated>2023-07-21T09:04:46+02:00</updated>
    <author>
        <name>Cédric Gérard</name>
    </author>
    <id>https://blog.d2velop.fr</id>

    <entry>
        <title>Les avantages d&#x27;être développeur en CDI : stabilité, équilibre et sérénité</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/les-avantages-detre-developpeur-en-cdi-stabilite-equilibre-et-serenite/"/>
        <id>https://blog.d2velop.fr/les-avantages-detre-developpeur-en-cdi-stabilite-equilibre-et-serenite/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/32/hiring-g2b04efdfb_1920.png" medium="image" />
            <category term="Développeur Mindset"/>

        <updated>2023-07-20T15:36:38+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/32/hiring-g2b04efdfb_1920.png" alt="" />
                    Aujourd’hui, je souhaite aborder un sujet qui suscite souvent des débats parmi les développeurs : le choix entre travailler en tant que salarié en CDI ou opter pour le statut de freelance. Bien que ces derniers temps de nombreuses voix préconisent le freelance, je voulais&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/32/hiring-g2b04efdfb_1920.png" class="type:primaryImage" alt="" /></p>
                <p>Aujourd’hui, je souhaite aborder un sujet qui suscite souvent des débats parmi les développeurs : le choix entre travailler en tant que salarié en CDI ou opter pour le statut de freelance. </p><h2 id="les-avantages-dêtre-developpeur-en-cdi">Les avantages d’être developpeur en CDI</h2>
<p>Bien que ces derniers temps de nombreuses voix préconisent le freelance, je voulais mettre en lumière les points qui m’ont fait choisir de travailler en CDI.</p><p><strong>1. Le full remote, plus facile à obtenir en CDI qu’en freelance</strong></p><p>L’un des principaux avantages du CDI est l’accès à plus d’offres en full remote. C’est un constat que j’ai fait lorsque j’ai comparé les deux. J’ai eu énormément de mal à trouver des missions freelance dispo en full remote alors qu’il est très simple d’en trouver en CDI. Encore aujourd’hui, je suis régulièrement démarché avec ce type d’offre.</p><p><strong>2. L’équilibre vie pro,vie perso</strong></p><p>En étant salarié, il est plus facile de trouver un équilibre entre vie professionnelle et vie personnelle. Le rythme est régulier, ce qui permet de mieux planifier ses journées et de prévoir des moments de détente et de loisirs sans se soucier de la prospection de nouveaux clients ou de la gestion de projets simultanés. On a aussi moins de pression, car il n’y a pas de fin de mission pour laquelle on peut se retrouver à rusher afin de tenir un engagement.</p><p><strong>3.	Aucune gestion ou acquisition de clients</strong></p><p>L’un des aspects les plus stressants, en tout cas, qui me stress le plus, du travail en freelance est la recherche et l’acquisition constante de clients. En tant que développeur en CDI, vous pouvez vous concentrer pleinement sur votre cœur de métier, sans vous soucier de la prospection et de l’aspect commercial.</p><p><strong>4.	Le sentiment d’appartenance à un groupe</strong></p><p>Travailler en CDI offre la possibilité de s’intégrer dans une structure, de partager des valeurs communes, et de participer à la culture d’entreprise. Cette dynamique de groupe favorise un environnement de travail collaboratif et stimulant, où l’échange d’idées et d’expériences est valorisé. Cette connexion avec une équipe peut renforcer la motivation et la satisfaction au travail. De mon expérience, les freelances ont tendance à prendre de la distance sur ce point. C’est avantageux lorsque l’entreprise n’est pas terrible (on n’a pas à se cogner la mauvaise politique interne.) mais on passe aussi à côté de quelque chose dans les bonnes entreprises. Cette mise de côté est souvent marquée par l’utilisation de « vous » au lieu des « nous » lors des échanges de groupe, qu’ils concernent la tech ou autre.</p><p><strong>5.	Les revenus assurés</strong></p><p>Un des atouts majeurs du CDI réside dans la stabilité financière qu’il offre. Contrairement aux freelances, dont les revenus peuvent être soumis à des fluctuations imprévisibles, les développeurs en CDI bénéficient d’un salaire régulier, avec des avantages sociaux tels que la couverture maladie, les congés payés et les cotisations retraites.</p><h2 id="les-inconvénients-à-être-développeur-en-cdi">Les inconvénients à être développeur en CDI</h2>
<p>Après avoir mis en avant les avantages d’être développeur en CDI, il est essentiel d’aborder les inconvénients liés à ce statut. Bien que le CDI offre stabilité et sécurité, il comporte également certains désavantages dont nous nous devons d’être conscients.</p><p><strong>1.	Temps réduit pour se former</strong></p><p>L’une des principales contraintes du CDI est le temps limité accordé à la formation continue. Alors que le secteur de la technologie évolue rapidement, il est crucial pour les développeurs de rester à jour avec les dernières technologies, langages de programmation et pratiques de développement. Malheureusement, certaines entreprises n’allouent qu’un temps restreint pour la formation, et il peut être difficile de s’adapter aux nouvelles tendances et de développer de nouvelles compétences en dehors de ces contraintes. Dans de tels cas, les développeurs doivent souvent investir de leur temps personnel en dehors des heures de travail pour rester compétents. On peut voir dans ce mode de formation quelque chose de contradictoire avec l’équilibre vie pro vie perso.</p><p><strong>2.	Nombre fixe de jours de vacances</strong></p><p>Bien que le CDI offre des congés payés, le nombre de jours de vacances est généralement fixe et déterminé par la politique de l’entreprise. Cela signifie que les développeurs doivent planifier soigneusement leurs vacances pour s’assurer qu’ils disposent de suffisamment de jours pour leurs besoins personnels et familiaux. Contrairement aux freelances, qui ont plus de flexibilité pour organiser leurs périodes de congé, les développeurs en CDI peuvent se sentir limités par cette contrainte.</p><p><strong>3.	Revenus souvent plus bas qu’en freelance</strong></p><p>L’un des inconvénients majeurs du CDI est que les revenus sont inférieurs, à seniorité égual, que ceux d’un freelance prospère. En tant que salarié, vos revenus sont généralement définis par votre contrat et votre salaire net mensuel, alors que les freelances ont la possibilité de proposer leur TJM pour leurs missions. Cela peut être un facteur à prendre en compte si vous recherchez une plus grande indépendance financière et que vous êtes prêt à assumer les risques liés à l’acquisition de clients en tant que freelance.</p><p><strong>4.	Changement de contexte métier moins fréquent</strong></p><p>Les développeurs en CDI peuvent faire face à une routine plus établie dans leur contexte métier. Contrairement aux freelances, qui sont souvent exposés à une variété de projets et de secteurs, les développeurs en CDI peuvent rester plus longtemps dans un même contexte métier. Cela peut limiter les opportunités d’explorer de nouvelles technologies ou de se diversifier dans différents domaines, ce qui peut être un inconvénient pour ceux qui aiment les défis et la variété. C’est aussi une des principales critiques de ce statut qui est qu’on peut finir par être emprisoné dans sa zone de confort.</p><p><strong>5.	Difficulté pour trouver du temps pour gérer son image professionnelle</strong></p><p>En tant que salarié en CDI, il peut être difficile de trouver du temps pour gérer activement son image professionnelle. Les freelances ont souvent l’avantage de consacrer plus de temps à leur branding personnel, leur présence en ligne et leur réseau professionnel, ce qui peut leur ouvrir de nouvelles opportunités. Les développeurs en CDI n’ont souvent pas le réflexe de jongler entre leurs responsabilités pour leur entreprise et la construction de leur image pro.</p><h2 id="conclusion">Conclusion</h2>
<p>Il est essentiel de reconnaître que chaque choix de carrière comporte des avantages et des inconvénients, et le statut de salarié en CDI ne fait pas exception. Il est important de prendre en compte ses objectifs professionnels, ses préférences personnelles et ses aspirations futures lorsqu’on évalue les options disponibles. Bien que le freelancing puisse convenir à certains, devenir un développeur freelance à succès n’est pas donné à tout le monde. Il faut se méfier des postes LinkedIn présentant cela comme la solution ultime. La question peut vraiment se poser pour une évolution d’un développeur qui travaille en ESN. C’est, à mon sens, un changement différent de rapport au travail lorsqu’on ne vend pas des prestations de services. </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ilek deuxième partie</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/ilek-deuxieme-patie/"/>
        <id>https://blog.d2velop.fr/ilek-deuxieme-patie/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/31/Logo_ilek_1200px.png" medium="image" />
            <category term="Chroniques"/>

        <updated>2023-07-13T09:00:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/31/Logo_ilek_1200px.png" alt="" />
                    Résumé des épisodes précédents (lien vers l’article ilek). Notre CTO a été remplacé après un exode massif de l’équipe tech vers d’autres horizons. L’équipe s’est restaffé en compensant les départs et une nouvelle organisation commence à voir le jour avec beaucoup d’ambition. De mon côté,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/31/Logo_ilek_1200px.png" class="type:primaryImage" alt="" /></p>
                <p>Résumé des épisodes précédents (lien vers l’article ilek). Notre CTO a été remplacé après un exode massif de l’équipe tech vers d’autres horizons. L’équipe s’est restaffé en compensant les départs et une nouvelle organisation commence à voir le jour avec beaucoup d’ambition.</p><p>De mon côté, j’ai changé d’équipe à la fin de l’année 2022. Je suis passé de l’activation des contrats à la facturation des contrats. Cette équipe avait perdu tous ces développeurs et travaillait sur un projet ambitieux de refonte du système de facturation d’ilek.</p><h2 id="team-facturation">Team facturation</h2>
<p>Ce projet a plusieurs origines, la première, c’est un changement de réglementation qui nous oblige de toute façon à retoucher en profondeur le système actuel. La deuxième, c’est la volonté d’aller vers un nouveau modèle d’offres pour nos clients. La dernière, c’est le code legacy du système existant qui ne donne pas satisfaction en termes de fiabilité et évolutivité. De plus, la stratégie côté tech était d’extraire du monolithe actuel les parties critiques en services dédiés.</p><p>La première équipe facturation s’était lancée dans un projet ambitieux en partant des nouvelles offres et de leur gestion pour introduire la nouvelle méthode de calcul des factures (pour info, le calcul d’une facture d’électricité ou des gaz est assez complexe). Le projet à durée longtemps et le départ des membres de l’équipe nous ont obligées et nous recentrer sur la partie facturation d’électricité qui était un impératif légal pour le premier février 2023. J’arrive dans l’équipe mi-novembre. Et nous sommes trois devs ; un dev front, un dev back senior sur le départ (il devait lui rester une semaine à ce moment-là.) et moi. Autant dire que toutes les conditions pour que le projet foire étaient réunis. Sans compter qu’à ce moment-là, je devais partie en congé paternité le 20 janvier. Avec la période de Noël au milieu, ça ne laissait pas beaucoup de place aux dérapages.</p><p>J’ai fait mon possible pendant toute cette période pour que le projet avance bien, en partant sur de petits incréments basés sur de tests d’acceptances avec des jeux de données qui nous garantissait la justesse de la facturation dans les différents cas de figure possibles.</p><p>On a quand même bien bossé même s’il était difficile d’être à un bon standard de qualité (selon mon point de vue) car on n’avait pas la possibilité d’avoir une boucle de feedback rapide. Le seul moyen, c’étaient les phases de QA qui venait à chaque incrément et dont les retours pouvaient tout remettre en cause.</p><p>Comme si on n’avait déjà pas assez de difficulté j’apprends juste avant le jour de l’an que l’accouchement de ma femme doit être déclenché et que ce sera pour le 6 janvier. Donc, au final, il n’y aura qu’un dev front pour terminer le travail. Sur le mois de janvier.</p><p>Je fais tout ce que je peux pour avancer au maximum avant cette date et laisser le moins de travail possible avant mon départ. Je me souviens que le jour du déclenchement, je travaillai encore depuis la maternité en attendant que le travail commence. </p><p>Au final, tout s’est plutôt bien passé. Le nouveau système de facturation est fiable et nous donne satisfaction. À mon retour, j’ai opéré quelques modifications pour compenser certains choix qu’on a faits pour favoriser la deadline.</p><h2 id="nouvelle-équipe-technique">Nouvelle équipe technique</h2>
<p>L’équipe a beaucoup grandi au cours de l’année 2022. Aujourd’hui en comptant les PO et les dev nous somme 34 et nous avons toujours des postes ouverts.
La crise énergétique nous a mis un coup d’arrêt, mais l’entreprise est suffisamment solide et nous avons pu la traverser sans trop de problèmes malgré quelque ralentissement dans nos lancements.</p><p>La nouvelle équipe facturation est aujourd’hui composé de 5 devs back, un PO et d’une opératrice experte en facturation. Nous sommes capables de travailler sur un périmètre bien plus large tout en ayant un très bon niveau de qualité technique.
Plus d’équipes égale plus de sujets, on sent vraiment la croissance et les ambitions de l’entreprise dans l’évolution de l’équipe technique et ça donne envie de voir ce que ça va donner à l’avenir. En vrai, ça fait plaisir de sentir une évolution positive, pour une fois, de faire partie d’une structure qui se développe et de pouvoir y contribuer.</p><h2 id="ilek-lévolution">ilek l’évolution</h2>
<p>Il n’y a pas que la technique et le produit qui évoluent, tous les autres pan d’ilek se développent. Les ressources humaines se sont structurés, la finance, les opérateurs et le marketing aussi.</p><p>Cette croissance rapide nous a fait atteindre une autre limite, celle de notre organisation. Les choix qui ont été faits quand nous étions peu nombreux montre leur limite avec la croissance des équipes.</p><p>Si on rezoom sur les dev, on se retrouve avec des problèmes de lenteur sur notre CI, la capacité de nos environnements de QA qui atteint le max de ce qu’elle peut délivrer, et cela, impact notre travail au quotidien. Il nous faut remettre en cause les choix du passé pour trouver de nouvelles façon de travailler qui soient l’adéquation avec notre nombre.</p><p>Passé le premier trimestre 2022 les nouvelles arrivées se sont enchaînées à un rythme régulier. Au final, les intégrations se passent bien, mais il est difficile de mettre en place une nouvelle culture de travail avec une équipe qui n’est pas stabilisée. L’équipe produit est pas mal bouleversée également et ce n’est pas évident d’avoir une vision claire des sujets sur lesquels on va devoir travailler. Ils ont tendance à arriver aux derniers moments. Surtout si on tient compte du contexte de la crise énergétique qui fait qu’on se projette au jour le jour.</p><p>L’année passe, on enchaîne les projets et améliorations diverses sans grosse difficulté. Au final avoir des équipes autonomes ça permet d’avoir une grande résilience aux aléas et de surmonter plus facilement les difficultés.</p><p>Personnellement, je ne vois pas le temps passer. L’année 2022 est passée vite et on est déjà en 2023 avec une entreprise plein d’ambition et de projets.</p><h2 id="mon-ressenti">Mon ressenti</h2>
<p>Pour moi, les choses ont beaucoup évolué. Je suis passé de nouvelle recrue à quelqu’un avec beaucoup plus d’importance lorsque l’équipe s’est réduite. Aujourd’hui notre staffing se compose de dev de tout niveau et d’autres membres de l’équipe sont moteur sur plein de sujets différents. Il y a pas mal défervescence et il devient difficile d’avoir une vision de tout ce qui se passe. On a aussi des team leaders pour chaque équipe afin de décharger un peu notre CTO des aspects managériaux et d’aider les équipes à s’organiser.</p><p>Avec tous les recrutements et cette organisation, j’ai l’impression d’être redevenu un dev parmi d’autres dans une équipe. Beaucoup des responsabilités que j’avais pendant la transition ont été récupérées par les team leaders ou d’être dev senior. J’avoue que c’est moins fatigant, mais j’ai l’impression d’avoir perdu quelque chose en chemin.</p><p>Je garde à l’esprit un des aspects qui m’a donner envie de rejoindre ilek. C’est le côté partage de connaissances et la possibilité d’amener les bonnes pratiques de développement. Je souhaite très clairement continuer à m’investir dans cette transmission. Entre le fonctionnement de l’entreprise, la motivation des dev, les projets et notre contexte métier il y a clairement un terreau propice et une bonne marge de progression pour nous. C’est clair qu’on n’est pas parfait. Il y a cependant quelque chose de vraiment motivant, c’est que tous les membres de l’équipe partagent l’envie de faire mieux et d’apprendre. Il y a une vraie capacité à se remettre en question concernant nos choix et la volonté de fournir les efforts pour améliorer l’existant. C’est à mon sens un contexte idéal pour apporter sa pierre à l’édifice quelque soit son niveau.</p><p>À l’heure où j’écris ces lignes, je suis candidat à une promotion afin d’opérer sur un périmètre plus large que l’équipe facturation. Cela me donnera la possibilité de m’attaquer à d’autre problématiques techniques et métier et de continuer à essaimer les graines du craft.</p><h2 id="conclusion">Conclusion</h2>
<p>Depuis que je suis chez ilek, chaque année propose son lot de nouveautés et chaque année m’a permis d’évoluer. C’est stimulant de voir son entreprise se développer et de sentir qu’on grandit avec elle dans son expertise professionnelle et métier. Il reste encore pas mal de défis à relever pour l’année 2023 et de sujets techniques à tacler. Il nous faut également harmoniser nos pratiques pour augmenter la qualité globale de notre travail. C’est sûr qu’il y a de quoi faire et qu’on ne va pas s’ennuyer.</p><p>PS : j’avais déjà écrit l’article à ce moment-là, donc je n’ai pas eu envie de le modifier. Je sais maintenant que j’ai eu ma promotion et que désormais, je suis <strong>tech lead</strong>. J’ai donc un poste qui va me permettre d’avancer sur les sujets de la qualité et du partage de connaissances.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Le principe d&#x27;injection de dépendance</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/le-principe-dinjection-de-dependance/"/>
        <id>https://blog.d2velop.fr/le-principe-dinjection-de-dependance/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/30/di.png" medium="image" />
            <category term="Code"/>

        <updated>2023-06-26T09:00:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/30/di.png" alt="" />
                    Le principe d’injection de dépendance (Dependency Injection ou DI) est le dernier principe SOLID. Il vise à réduire les dépendances directes entre les classes en permettant l’injection des dépendances nécessaires depuis l’extérieur. Selon Bob Martin, le principe d’injection stipule : Les modules de haut niveau&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/30/di.png" class="type:primaryImage" alt="" /></p>
                <p>Le principe d’injection de dépendance (Dependency Injection ou DI) est le dernier principe SOLID. Il vise à réduire les dépendances directes entre les classes en permettant l’injection des dépendances nécessaires depuis l’extérieur.</p><p>Selon Bob Martin, le principe d’injection stipule :</p><p><em>Les modules de haut niveau ne doivent pas dépendre de modules de bas niveau. Les deux devraient dépendre des abstractions.</em></p><p><em>Les abstractions ne doivent pas dépendre des détails. Les détails devraient dépendre des abstractions.</em></p><p>Selon le principe DI, les dépendances d’une classe ne devraient pas être créées ou résolues à l’intérieur de cette classe elle-même. Au lieu de cela, les dépendances doivent être fournies de manière externe, généralement par le biais de constructeurs, de méthodes ou de propriétés, ce qui permet une plus grande flexibilité et facilite les tests et la réutilisabilité du code.</p><p>Grâce à cette méthode, les dépendances ne sont plus exprimées statiquement (hard coded ou instancié dans la classe) mais dynamiquement à l’exécution. Cela nous permet de changer la valeur d’une dépendance pendant que le programme s’exécute. Par exemple, on peut injecter un algorithme de recherche différent en fonction du choix de l’utilisateur. On peut aussi injecter une implémentation particulière en fonction du contexte d’exécution, par exemple un “fake” d’un service externe en local ou en environnement de test.</p><p>Prenons on exemple de code pour illustrer ce principe.</p><div class='code-toolbar'>
    <pre>
        <code class="language-typescript">
class UserService {
  private database: Database;
<br/>
  constructor() {
    this.database = new Database();
  }
<br/>
  getUsers(): User[] {
    return this.database.query('SELECT * FROM users');
  }
<br/>
  saveUser(user: User): void {
    this.database.insert('users', user);
  }
}
        </code>
    </pre>
    <span class="toolbar">TypeScript</span>
</div>

<p>Dans cet exemple, la classe <code>UserService</code> ne respecte pas le principe d’injection de dépendance. Elle crée directement une instance de la classe <code>Database</code> à l’intérieur de son constructeur. On crée ici une dépendance étroite entre les deux classes, rendant difficile le remplacement ou la substitution de la classe <code>Database</code> par une autre implémentation. De plus, cela complique la mise en place des tests unitaires, car nous ne pouvons pas facilement simuler ou substituer la classe <code>Database</code>. </p><p>Voici tout simplement la version qui permet de résoudre ce problème :</p><div class='code-toolbar'>
    <pre>
        <code class="language-typescript">
class UserService {
  private database: Database;
<br>
  constructor(database: Database) {
    this.database = database;
  }
<br>
  getUsers(): User[] {
    return this.database.query('SELECT * FROM users');
  }
<br>
  saveUser(user: User): void {
    this.database.insert('users', user);
  }
}
        </code>
    </pre>
    <span class="toolbar">TypeScript</span>
</div>

<p>Dans cet exemple, nous avons mis en place l’injection par constructeur. La classe <code>UserService</code> reçoit une instance de <code>Database</code> lors de la création d’une nouvelle instance. Cela permet de fournir une implémentation spécifique de <code>Database</code> à la classe <code>UserService</code> lors de son instanciation. Cette pratique facilite également les tests unitaires en permettant de fournir une instance mock de <code>Database</code> lors des tests.</p><p>Notre exemple s’appuie sur un langage typé statiquement. Le type à injecter (Database) est très souvent une interface qui explicite le contrat attendu par la classe cliente (UserService).</p><p>Qu’en est-il pour un langage dynamiquement typé, pour lequel il n’est pas possible de définir une interface spécifique pour l’injection. Et bien dans ce cas, il est possible d’injecter n’importe quelle instance qui possède les mêmes méthodes que celles utilisées dans la classe cliente. Et c’est la responsabilité du développeur que le comportement soit correct.</p><p>Voici la version du code précédent en Ruby :</p><div class='code-toolbar'>
    <pre>
        <code class="language-ruby">
class UserService
  def initialize(database)
    @database = database
  end
<br/>
  def get_users
    @database.query('SELECT * FROM users')
  end
<br/>
  def save_user(user)
    @database.insert('users', user)
  end
end
        </code>
    </pre>
    <span class="toolbar">Ruby</span>
</div>

<h3 id="conclusion">Conclusion</h3>
<p>Ce principe favorise la flexibilité, la testabilité et la réutilisabilité du code en réduisant les dépendances directes entre les classes. Avec ce principe, une classe peut se concentrer sur sa responsabilité unique et n’a plus a créer les objets dont elle dépend. Il est la base l’inversion de contrôle, le concept qu’on retrouve dans toutes les architectures qui s’appuient sur le pattern Ports/Adapters.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Le principe de ségrégation des interfaces</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/le-principe-de-segregation-des-interfaces/"/>
        <id>https://blog.d2velop.fr/le-principe-de-segregation-des-interfaces/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/29/isp_title.png" medium="image" />
            <category term="Code"/>

        <updated>2023-06-19T09:00:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/29/isp_title.png" alt="" />
                    Le principe de ségrégation des interfaces (Interface Segregation Principle ou ISP) est l’un des cinq principes SOLID de la programmation orientée objet. Il met l’accent sur la conception d’interfaces claires, spécifiques et cohérentes pour les clients, afin de minimiser les dépendances inutiles et de favoriser&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/29/isp_title.png" class="type:primaryImage" alt="" /></p>
                <p>Le principe de ségrégation des interfaces (Interface Segregation Principle ou ISP) est l’un des cinq principes SOLID de la programmation orientée objet. Il met l’accent sur la conception d’interfaces claires, spécifiques et cohérentes pour les clients, afin de minimiser les dépendances inutiles et de favoriser la modularité et la flexibilité du code.</p><p>Selon le principe ISP, les clients (classes, modules, ou composants) ne devraient pas être forcés d’implémenter des fonctionnalités dont ils n’ont pas besoin. Au lieu de cela, les interfaces doivent être suffisamment spécifiques pour répondre exactement aux besoins des clients spécifiques.</p><p>Prenons un cas concret :</p><div class='code-toolbar'>
    <pre>
        <code class="language-typescript">
interface MusicPlayer {
    playMusic(): void;
    stopMusic(): void;
    displayLyrics(): void;
}
        </code>
    </pre>
    <span class="toolbar">TypeScript</span>
</div>
Voici le contrat d'interface pour un lecteur de musique.

<p>Maintenant, ajoutons deux lecteurs avec des implémentations et des cibles différentes.</p><div class='code-toolbar'>
    <pre>
        <code class="language-typescript">
class MobilePlayer implements MusicPlayer {
    public playMusic(): void {
        console.log("Playing music...");
    }
<br/>
    public stopMusic(): void {
        console.log("Stopping music...");
    }
<br/>
    public displayLyrics(): void {
        console.log("Displaying lyrics...");
    }
}
        </code>
    </pre>
    <span class="toolbar">TypeScript</span>
</div>

<p>La première implémentation de notre contrat concerne un lecteur pour mobile. Ce lecteur support les trois fonctionnalités du contrat.</p><div class='code-toolbar'>
    <pre>
        <code class="language-typescript">
class Radio implements MusicPlayer {
    playMusic(): void {
        console.log("Playing music...");
    }
<br/>
    stopMusic(): void {
        console.log("Stopping music...");
    }
<br/>
    displayLyrics(): void {
        throw new Error("Radio doesn't support displaying lyrics.");
    }
}
        </code>
    </pre>
    <span class="toolbar">TypeScript</span>
</div>

<p>Maintenant, c’est une radio, qui ne supporte pas l’affichage des paroles. Dans ce cas, la classe Radio est obligée de mettre en œuvre la méthode <code>displayLyrics</code> même si elle n’en a pas besoin. La classe Radio est forcée de fournir une implémentation vide ou de lancer une exception pour une fonctionnalité qui n’est pas pertinente pour elle. De plus, lancer une exception ici viole également le principe de Liskov, dont vous pouvez trouver une présentation dans <a href="https://blog.d2velop.fr/le-principe-de-substitution-de-liskov/">l’article de la semaine dernière</a>, car on ne peut pas substituer la radio à tous les <code>MusicPlayer</code> sans causer de problème lors de l’appel à la méthode <code>displayLyrics</code>.</p><p>Remanions un peu ce code afin de régler le problème et de respecter le principe ISP. La première étape consiste à séparer notre interface en deux.</p><div class='code-toolbar'>
    <pre>
        <code class="language-typescript">
interface MusicPlayer {
    playMusic(): void;
    stopMusic(): void;
}
<br/>
interface LyricsDisplay {
    displayLyrics(): void;
}
        </code>
    </pre>
    <span class="toolbar">TypeScript</span>
</div>

<p>Nous pouvons donc maintenant implémenter ces interfaces depuis nos deux lecteurs précédents.</p><div class='code-toolbar'>
    <pre>
        <code class="language-typescript">
class MobilePlayer implements MusicPlayer, LyricsDisplay {
    playMusic(): void {
        console.log("Playing music...");
    }
<br/>
    stopMusic(): void {
        console.log("Stopping music...");
    }
<br/>
    displayLyrics(): void {
        console.log("Displaying lyrics...");
    }
}
<br/>
class Radio implements MusicPlayer {
    playMusic(): void {
        console.log("Playing music...");
    }
<br/>
    stopMusic(): void {
        console.log("Stopping music...");
    }
}
        </code>
    </pre>
    <span class="toolbar">TypeScript</span>
</div>

<p>Dans cet exemple, nous avons divisé l’interface <code>MusicPlayer</code> en deux avec d’un part <code>MusicPlayer</code> et d’autre part <code>LyricsDisplay</code>. La classe <code>MobilePlayer</code> implémente les deux interfaces, car elle a besoin des fonctionnalités de lecture de musique et d’affichage des paroles. La classe Radio implémente uniquement l’interface <code>MusicPlayer</code>, car elle n’a pas besoin de la fonctionnalité d’affichage des paroles.</p><p>Ainsi, en respectant le principe ISP, nous avons créé des interfaces spécifiques qui permettent aux clients de dépendre uniquement des fonctionnalités dont ils ont besoin, évitant ainsi d’avoir à implémenter des fonctionnalités inutiles. Nos deux implémentations sont bien interchangeables partout où l’on souhaite avoir un lecteur de musique.</p><p>Ce principe s’applique particulièrement pour les langages typés statiquement (comme TypeScript). Bien que le problème puisse se retrouver également dans les langages typés dynamiquement (Ruby par exemple).</p><p>Reprenons notre exemple, mais avec Ruby cette fois-ci. Dans le cas d’un langage typé dynamiquement, on ne peut pas créer d’interface pour définir un contrat et on n’a pas de type dans nos fonctions pour nous garantir ce qu’on doit avoir en paramètre ou en retour d’une fonction. En Ruby, on considère que toute instance qui répond aux attentes d’une fonction peut être utilisée. En d’autres termes, peu importe le type de l’élément passé en paramètre, si notre fonction à besoin d’appeler la méthode <code>foo</code> sur cet élément, alors toutes les instances de classes ou structure de données qui ont une méthode <code>foo</code> peuvent être substituée.</p><p>Voici la première implémentation de lecteur mobile :</p><div class='code-toolbar'>
    <pre>
        <code class="language-ruby">
class MobilePlayer
<br/>
  def play_music
    puts "Playing music..."
  end
<br/>
  def stop_music
    puts "Stopping music..."
  end
<br/>
  def display_lyrics
    puts "Displaying lyrics..."
  end
    <br/>
end
        </code>
    </pre>
    <span class="toolbar">Ruby</span>
</div>

<p>En maintenant l’implémentation de la radio :</p><div class='code-toolbar'>
    <pre>
        <code class="language-ruby">
class Radio
 <br/>
  def play_music
    puts "Playing music..."
  end
<br/>
  def stop_music
    puts "Stopping music..."
  end
    <br/>
end
        </code>
    </pre>
    <span class="toolbar">Ruby</span>
</div>

<p>Cette dernière ne propose une implémentation que pour les deux premières méthodes et ne peut donc pas afficher les paroles.</p><p>En Ruby, ces deux classes sont parfaitement interchangeables pour les méthodes <code>play_music</code> et <code>stop_music</code>. En revanche, ce n’est pas le cas pour <code>display_lyrics</code> qui va provoquer une <code>NoMethodError</code> avec une instance de Radio. Ce n’est pas forcément un problème, car il n’y a pas de classe parente ici puisqu’il n’y a pas besoin de créer un contrat dans un langage typé dynamiquement. En revanche, pour éviter les bugs, il faut beaucoup de vigilance aux développeurs afin de ne pas se retrouver à utiliser une instance de classe dans un contexte auquel elle n’est pas adaptée. C’est pour cette raison qu’en Ruby (tout comme en JavaScript) on se retrouve avec beaucoup de programmation défensive. Dans le cas présent, pour l’affichage des paroles, on pourrait tester au préalable si notre instance répond à la méthode <code>display_lyrics</code> (<code>object.respond_to?(:display_lyrics)</code>) avant de l’appeler.</p><p>En conclusion, on peut retenir que dans le cadre d’un langage typé statiquement, lorsqu’on définit des contrats explicites, il faut faire attention à avoir des contrats adaptés à nos clients. L’objectif étant de ne pas forcer des implémentations du contrat à produire du code inutilement. Pour un langage typé dynamiquement, on ne définit pas de contrat explicite. Donc il n’y a pas d’obligation d’implémenter des méthodes dont on n’a pas besoin. Il est plus facile de ne pas se retrouver à devoir fournir une implémentation de quelque chose sans en avoir le besoin. En revanche, il n’y a pas non plus d’assurance que le composant qu’on utilise est correcte. Il n’y a aucune garantie que les implémentations respectent bien un contrat particulier (nom et paramètre des fonctions ainsi que ce que la fonction retourne comme type de valeur). Cela met la rigueur des développeurs à rude épreuve et est souvent la cause des bugs d’une application.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Le principe de substitution de Liskov</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/le-principe-de-substitution-de-liskov/"/>
        <id>https://blog.d2velop.fr/le-principe-de-substitution-de-liskov/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/28/liskov.png" medium="image" />
            <category term="Code"/>

        <updated>2023-06-06T09:00:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/28/liskov.png" alt="" />
                    Troisième principe de l’ensemble SOLID, est le Principe de Substitution de Liskov, définit les conditions que doivent respecter les sous-classes lorsqu’elles sont utilisées à la place de leurs classes parentes. Ce principe a été formulé par Barbara Liskov en 1987. Il énonce que “Si S&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/28/liskov.png" class="type:primaryImage" alt="" /></p>
                <p>Troisième principe de l’ensemble SOLID, est le Principe de Substitution de Liskov, définit les conditions que doivent respecter les sous-classes lorsqu’elles sont utilisées à la place de leurs classes parentes. </p><p>Ce principe a été formulé par Barbara Liskov en 1987. Il énonce que “Si S est une sous-classe de T, alors les objets de type T peuvent être remplacés par des objets de type S sans altérer la cohérence du programme”. En d’autres termes, cela signifie que les sous-classes doivent pouvoir être utilisées de manière interchangeable avec leurs classes parentes, sans introduire d’erreurs ni de comportements inattendus.</p><p>Prenons un exemple concret d’un code qui ne respect pas ce principe pour illustrer les problèmes que cela peut engendrer.</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/liskov_bad_1-2.png" alt="Code qui utilise une implementation qui ne respect pas le principe de Liskov"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_1-2-2xl.png 1600w">
</figure>

<p>Dans cet exemple, nous avons une fonction qui va prendre un dispositif capable de jouer de la musique. La fonction va lancer la musique, réaliser des opérations et enfin couper la musique. Cette même fonction utilise le retour du dispositif pour déterminer s’il y a une erreur et la gérer.</p><p>Voyons maintenant le code des dispositifs.</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/liskov_bad_2.png" alt="Interface MusicDevice et code d'un dispositif cassé"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_bad_2-2xl.png 1600w">
</figure>

<p>Ici, nous avons, tout d’abord, la définition de l’interface MusicDevice. Cette dernière permet de définir le contrat que doit respecter un dispositif musical. Ensuite, on le code d’un appareil cassé et qui n’est plus en mesure de lire de la musique.</p><p>Dans cette implémentation, on a choisi de lever une exception lorsqu’il n’est pas possible de lire la musique. Le problème, c’est qu’ici notre erreur ne va pas être gérée par le gestionnaire d’erreur de la fonction qui lance la lecture de la musique. Pour qu’une erreur soit gérée, il faudrait que notre code retourne la valeur “false”. Il y a donc une différence de comportement entre ce que fait ce dispositif et d’autre qui vont respecter le contrat d’interface.</p><p>Cette classe peut littéralement planter l’application avec une levée d’exception là où les appelants vont attendre un booléen pour gérer les cas d’erreurs. Notre dispositif cassé ne respectant pas le contrat qu’il étend alors il ne respect pas le principe de Liskov non plus. Dans ce cas, notre BrokenBluetoothSpeaker, n’est pas interchangeable avec n’importe quel MusicDevice sans altérer le comportement de l’application.</p><p>Remanions maintenant ce code et ajoutons d’autre dispositif dans un contexte ou le principe de substitution de Liskov est respecté :</p><p>Voici notre dispositif Bluetooth défectueux respectant le contrat en s’assurant de toujours retourner un booléen.</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/liskov_good_1.png" alt="Code d'un dispositif bluetooth cassé"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_1-2xl.png 1600w">
</figure>

<p>Voici deux autres dispositifs qui sont aussi des MusicDevice :</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/liskov_good_2.png" alt="Code d'un casque audio"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_2-2xl.png 1600w">
</figure>

<figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/liskov_good_3.png" alt="Code d'un dispositif bluetooth fonctionnel"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/liskov_good_3-2xl.png 1600w">
</figure>

<p>Dans cet exemple, l’ensemble des trois classes ci-dessus sont bien interchangeables ainsi qu’avec n’importe quel autre MusicDevice. Ces échanges peuvent se faire sans que cela ne pose de problème de fonctionnement au niveau de l’application. Cela ne générera pas de comportement imprévisible, car le contrat de la classe parente (ici notre interface MusicDevice) est respecté.</p><p>Nous avons ici pris l’exemple d’un langage typé statiquement où le typage (interface) force quand même notre code à respecter un contrat définit à l’avance. Pour le casser nous avons du passer par la levée d’une exception. En revanche, si on regarde un langage où le typage ne nous aidera pas, il est beaucoup plus facile d’introduire des comportements imprévisibles.</p><p>Prenons un exemple similaire, mais cette fois-ci en Ruby :</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/ruby_liskov_bad_1-2.png" alt="Code d'une application de musique en Ruby"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_1-2-2xl.png 1600w">
</figure>

<p>Ici, nous avons un code simple qui va lire de la musique et la stopper à la fin du programme. Ce code va quand même vérifier que la musique est bien en train de jouer. Dans le cas contraire, elle va remonter une erreur.</p><p>Prenons maintenant les implémentations des dispositifs suivantes :</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/ruby_liskov_bad_2.png" alt="Code d'une classe casque en Ruby"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_2-2xl.png 1600w">
</figure>

<figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/ruby_liskov_bad_3.png" alt="Code d'une classe enceinte bluetooth en Ruby"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_3-2xl.png 1600w">
</figure>

<figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/28/ruby_liskov_bad_4.png" alt="Code d'une classe enceinte bluetooth cassée en Ruby"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-xs.png 300w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-sm.png 480w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-md.png 768w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-lg.png 1024w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-xl.png 1360w ,https://blog.d2velop.fr/media/posts/28/responsive/ruby_liskov_bad_4-2xl.png 1600w">
</figure>

<p>Ici, nous n’avons aucun typage pour nous imposer un type de retour bien que ces trois classes étendent la même classe parente. On voit que chaque implémentation est faite d’une façon différente. La première décide de retourner un booléen, la deuxième retourne l’instance en cas de succès et nil s’il y a eu un problème. Enfin, la dernière lève une exception.</p><p>Ces trois classes ne sont pas du tout interchangeables sans causer des incohérences dans l’exécution d’une application bien qu’elles soient du même type (MusicDevice). Il y a cependant des cas qui “tombent en marche”, comme la classe Headphone qui retourne false en cas d’erreur et la classe BluetoothSpeaker qui elle retourne nil. Notre application utilisant un “falsey check” supportera cette différence, mais c’est plus un coup de chance qu’un design réussi. Il est impossible de proposer une application qui manipule ces trois classes facilement et sans risque en s’appuyant sur la classe parente. Pour la gestion des erreurs, par exemple, il est indispensable de connaître les spécificités de chacune. Imaginer ce que cela peut donner avec des dizaines de dispositifs différents.</p><p>Il n’y a pas de miracle ici, il faut de la rigueur du côté des développeurs pour éviter ce genre de problèmes et garantir un code robuste. Il y a aussi un moyen de s’appuyer sur les tests unitaires afin de valider les comportements. Je proposerai un article prochainement avec un exemple complet sur RSpec.</p><h3 id="conclusion">Conclusion</h3>
<p>Le principe de substitution de Liskov est, au final, uniquement du bon sens. En effet, si j’ai un programme qui affiche des formes géométriques, il doit être capable d’afficher des ronds, des carrés et des triangles de la même façon du moment que ces trois formes soient toutes des formes géométriques du même type. Sans entendu, que les classes Circle, Square et Triangle héritent de Shape. De la même manière, je dois être capable d’ajouter la classe Rectangle et permettre à mon application de l’afficher sans avoir à modifier quoi que ce soit d’autre. </p><p>Le non-respect de ce principe est à l’origine de beaucoup de souffrance dans la programmation orientée objet. C’est un problème bien plus difficile à suivre dans les langages qui ne bénéficient pas d’un typage statique.</p><p>De manière générale, il faut toujours être vigilant lorsqu’on s’appuie sur l’héritage. Cela implique un couplage fort entre une classe et sa classe parente dont elle doit respecter scrupuleusement le comportement.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Le principe Ouvert/Fermé</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/le-principe-ouvertferme/"/>
        <id>https://blog.d2velop.fr/le-principe-ouvertferme/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/27/title.png" medium="image" />
            <category term="Code"/>

        <updated>2023-05-30T09:00:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/27/title.png" alt="" />
                    Second principe appartenant à la gamme SOLID, le principe ouvert/fermé (Open/Closed principle) encourage la conception de logiciels extensibles sans nécessité de modifications directs sur le code existant. Le Principe Ouvert/Fermé est formulé par Bertrand Meyer et stipule : “Les entités logicielles (classes, modules, fonctions, etc.)&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/27/title.png" class="type:primaryImage" alt="" /></p>
                <p>Second principe appartenant à la gamme SOLID, le principe ouvert/fermé (Open/Closed principle) encourage la conception de logiciels extensibles sans nécessité de modifications directs sur le code existant.</p><p>Le Principe Ouvert/Fermé est formulé par Bertrand Meyer et stipule : “Les entités logicielles (classes, modules, fonctions, etc.) doivent être ouvertes à l’extension, mais fermées à la modification”. En d’autres termes, cela signifie que vous devez concevoir votre code de manière à ce qu’il puisse être étendu pour répondre à de nouveaux besoins ou fonctionnalités, sans avoir à modifier directement le code existant.</p><p>Respecter ce principe est extrêmement puissant puisque les éléments de votre code deviennent interchangeables facilement et sans impact au-delà du composant qu’on ajoute. On peut voir ça comme le fait de remplacer une batterie de voiture par une plus performante, cela se fait sans avoir à démonter le moteur ni le moindre risque pour le reste des éléments… À condition de respecter les spécifications de la batterie.</p><p>Prenons un cas concret pour illustrer les avantages de ce principe. Imaginons que nous ayons un système qui représente une machine à café. Cette machine permet de réaliser les cafés suivants :</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/27/coffees.png" alt="Classes représentant les cafés"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/27/responsive/coffees-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees-2xl.png 1600w">
</figure>

<p>Voici maintenant le code de la machine à café :</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/27/coffee_machine.png" alt="Code de la machine à caffé"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine-2xl.png 1600w">
</figure>

<p>On remarque que dans cette implémentation de la machine à café, on sera obligé de modifier cette classe à chaque modification concernant les cafés. Il faudra rajouter une clause dans la sélection pour introduire un nouveau café. Il faudra également modifier ce code si la façon de préparer un café change. Imaginons qu’on rajoute une étape à la préparation d’un cappuccino. Il faudra alors aller dans la classe machine à café pour introduire cette nouvelle étape. </p><p>Ici, la machine à café, n’est pas fermée aux modifications. C’est le seul moyen d’étendre son comportement. Elle est également couplée à la préparation de chaque café.</p><p>Voici maintenant un refactoring qui permet de suivre le principe ouvert/fermé en partant du même problème.</p><p>Tout d’abord, on introduit une interface, Coffee, dont l’objectif est de garantir un contrat unique avec la machine à café.</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/27/coffee_interface.png" alt="Interface pour les cafés"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_interface-2xl.png 1600w">
</figure>

<p>Maintenant, tout nos cafés vont implémenter cette interface et vont donc répondre au même contrat.</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/27/coffees_ref.png" alt="Les cafés étendant l'interface Coffee"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffees_ref-2xl.png 1600w">
</figure>

<p>Vous remarquerez que seule la méthode qui vient de l’interface est publique. Les autres méthodes ont été passées en privé. En faisant cela, on encapsule les détails concernant chaque café dans leur propre classe.</p><p>Voici maintenant l’impact sur notre machine à café :</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/27/coffee_machine_ref.png" alt="La nouvelle version de la machine à café"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref-2xl.png 1600w">
</figure>

<p>L’introduction de l’interface nous a permis de retirer toute la complexité de la préparation de chaque café de la classe. Maintenant, notre machine à café est protégée des modifications des autres classes. Je vous vois venir, vous allez me dire qu’on a toujours le bloc conditionnel pour la sélection d’un café. Donc, en ajoutant un nouveau type de café, on devra obligatoirement modifier le code de la machine à café.</p><p>Je ne vais pas vous mentir, dans un cas celui-là, on aura toujours, quelque part, besoin de faire le lien entre le paramètre de la sélection et le café à préparer. Il aura donc besoin d’un bout de code similaire à celui-là pour le faire. </p><p>Il y a néanmoins une amélioration intéressante à proposer pour la classe CoffeeMachine.</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/27/coffee_machine_ref2.png" alt="La version SRP de la machine à café"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_machine_ref2-2xl.png 1600w">
</figure>

<p>Ici, on extrait simplement la sélection du café dans une classe dédiée. On introduit ce sélecteur comme une dépendance de la machine à café. Maintenant, quel que soit le changement qu’on introduit, ajout d’un nouveau style de café ou modification dans la préparation d’un café, il n’y aura plus d’impact sur la classe CoffeeMachine. Cette classe respect bien le principe Open/Close. Elle est ouverte à l’extension, on peut lui passer un autre type de sélecteur ou introduire de nouveau café facilement. En revanche, elle est fermée aux modifications qui viennent de l’extérieur. </p><p>Notez au passage que ce refactoring nous a permis de respecter le Single Responsibility Principle dont je parle <a href="https://blog.d2velop.fr/le-principe-de-responsabilite-unique/">ici</a>.</p><p>Pour finir sur le code voici un exemple de sélecteur de café. Cette classe sera toujours dépendante de l’introduction de nouveau type de café et devra être modifiée en conséquence. Pour ce genre de classe, c’est un compromis qu’on fait. Cela ne pose pas de problème tant que la seule responsabilité de cette classe, c’est de faire le mapping entre un paramètre et la classe qu’elle doit fournir. </p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/27/coffee_selector.png" alt="Le selecteur de café"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-xs.png 300w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-sm.png 480w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-md.png 768w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-lg.png 1024w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-xl.png 1360w ,https://blog.d2velop.fr/media/posts/27/responsive/coffee_selector-2xl.png 1600w">
</figure>

<h3 id="conclusion">Conclusion</h3>
<p>Ce qu’il faut avoir en tête pour respecter ce principe, c’est qu’une entité logicielle doit pouvoir être impacté sans que son code n’ait besoin de changer. Pour ça, il faut que son comportement puisse être étendu. Dans le cas de notre machine à café, c’est l’introduction d’une interface commune à tous les cafés et d’un sélecteur qui nous permet d’étendre les capacités de notre machine sans avoir à modifier son propre code.</p><p>Ce qui est intéressant dans cet exemple, pourtant simple, c’est que pour rendre le code compatible avec le principe ouvert/fermé nous avons du faire appel à des techniques de programmation qui correspondent aux trois derniers principes de SOLID. Nous verrons cela dans les posts à suivre sur le sujet.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Le principe de responsabilité unique</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/le-principe-de-responsabilite-unique/"/>
        <id>https://blog.d2velop.fr/le-principe-de-responsabilite-unique/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/26/srp_title.png" medium="image" />
            <category term="Code"/>

        <updated>2023-05-18T22:59:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/26/srp_title.png" alt="" />
                    Le principe SOLID de responsabilité unique (Single Responsibility principle ou SRP) est un principe fondamental en programmation orientée objet (POO) qui stipule qu’une unité de code (UdC) ne devrait avoir qu’une seule responsabilité. Dit comme ça, ce principe semble simple à comprendre. Mais d’expérience, c’est&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/26/srp_title.png" class="type:primaryImage" alt="" /></p>
                <p>Le principe SOLID de responsabilité unique (Single Responsibility principle ou SRP) est un principe fondamental en programmation orientée objet (POO) qui stipule qu’une unité de code (UdC) ne devrait avoir qu’une seule responsabilité.</p><p>Dit comme ça, ce principe semble simple à comprendre. Mais d’expérience, c’est certainement un des plus mal compris et maîtrisé. Par exemple, si je vous demande ce qu’on entend par “responsabilité”, qu’est-ce qui vous vient à l’esprit ?</p><p>Régulièrement, on va dire que notre UdC ne doit être en charge que d’un seul traitement. Cette définition est tout aussi vague que la précédente. Une définition plus technique consiste à dire qu’une UdC ne doit avoir qu’une seule raison de changer. La encore, ce n’est pas évident de comprendre ce qu’on entend par la notion de changement. Est-ce qu’il s’agit seulement de l’ajout d’une fonctionnalité ? Un refactoring est-il considéré comme un changement ? Qu’en est-il de la monté de version d’un lib ?</p><p>Pour mieux cerner ce principe, il faut comprendre que SRP est un principe qui concerne la répartition de la logique du code dans une application. En POO, on pourrait simplifier ça par le fait de savoir où mettre tel code dans telle classe ou module.</p><p>En fait, et c’est <a href="https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html">Bob Martin qui le dit lui-même</a>, la meilleure question à se poser à ce sujet, c’est “A QUI?”. À qui est dédiée cette fonctionnalité ? Lorsqu’on est capable de répondre à cette question, si une UdC est en charge de répondre aux demandes de plus d’un profil d’utilisateur alors elle ne respect par le principe de responsabilité unique. Elle a donc autant de raison de changer qu’il y a de profils concernés par son utilisation.</p><p>Prenons un exemple concret:</p><figure class="code_img">
    <img loading="lazy" src="https://blog.d2velop.fr/media/posts/26/no_srp_ruby-3.png" alt="no srp Ruby code"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/no_srp_ruby-3-2xl.png 1600w">
    <figcaption>Code qui ne respecte pas SRP</figcaption>
</figure>

<p>Le classe ci-dessus présente quatre méthodes, chacune d’elles a un rôle bien défini. Il y en a une pour calculer la paie d’un salarié, une pour afficher le résultat, une pour récupérer le nombre d’heures travaillées par le salarié et enfin une pour sauvegarder le salarié en base de données.</p><p>Ici, chacune des méthodes est liée à un profil d’utilisateur différent. Le calcul de la paie est lié à la finance, l’affichage de la paie est de la responsabilité des ressources humaines, le reporting du temps de travail est le rôle des manager et enfin la sauvegarde en DB est de la responsabilité de l’équipe technique.</p><p>Si on se réfère à notre définition, quelques lignes plus haut, cette implémentation ne respect pas le principe de responsabilité unique. En effet, cette classe va changer selon l’évolution des besoins de ce quatre utilisateurs. Il y a donc bien quatre origines possibles à l’évolution de cette classe et elle à finalement plusieurs raisons de changer.</p><p>Pourtant, à première vue, cette classe semble tout à fait correcte. Alors comment faire si on souhaite respecter ce principe. Voici un exemple de code qui peut vous aider à y voir plus clair :</p><figure class="code_img">
    <img loading="lazy"  src="https://blog.d2velop.fr/media/posts/26/srp_ruby_employee.png" alt="srp Ruby code"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_employee-2xl.png 1600w">
    <figcaption>Classe pour représenter un employé</figcaption>
</figure>

<p>Ici, on réduit la classe Employee à un simple value object sans logique. La logique va être déplacée dans d’autres classes, chacune sera dédiée à une responsabilité. Voici un exemple de découpage :</p><figure class="code_img">
    <img loading="lazy"  src="https://blog.d2velop.fr/media/posts/26/srp_ruby_pay.png" alt="srp Ruby code"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_pay-2xl.png 1600w">
    <figcaption>Classes en charge de gérer la paie</figcaption>
</figure>

<p>Vous remarquerez ici qu’on fournit deux classes pour calculer la paye. Ces classes, qui implémentent le même contrat (PayCalculator) permettent de remplacer le <em>if</em> de la fonction de calcul de la version précédente.</p><figure class="code_img">
    <img loading="lazy"  src="https://blog.d2velop.fr/media/posts/26/srp_ruby_save.png" alt="srp Ruby code"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/srp_ruby_save-2xl.png 1600w">
    <figcaption>Classes pour la persistence et le reporting</figcaption>
</figure>

<figure class="code_img">
    <img loading="lazy"  src="https://blog.d2velop.fr/media/posts/26/printer_srp_ruby.png" alt="srp Ruby code"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/printer_srp_ruby-2xl.png 1600w">
    <figcaption>Classe pour l'affichage en console de la paye</figcaption>
</figure>

<p>Voici les trois dernières responsabilités qui ont été sortie. Un repository est en charge de la persistance des employés, un reporter se charge de calculer le temps de travail effectif en fonction du planning et enfin une classe qui permet d’afficher une paye en console.</p><p>Premier constat, on a plus de fichiers au bout du compte. Chaque fichier reste simple correspond à une intention bien particulière qu’il est facile de comprendre. Ici, chaque fichier est à mettre en face d’un profil d’utilisateur et n’a donc qu’une seule raison de changer.</p><p>D’un point vu technique, il est plus facile de faire évoluer le code de la deuxième version, car un changement dans l’une des classes ne pourra pas avoir d’impact sur les autres. On peut facilement remplacer une classe par une autre si on veut faire évoluer notre besoin. C’est le cas pour le calcul de la paye, mais on pourrait faire de même avec le pointer pour imprimer une fiche de paie ou envoyer le résultat par email par exemple.</p><p>Voici un petit exemple d’un calcul de paie qui s’appuie sur le découpage de nos responsabilités :</p><figure class="code_img">
    <img loading="lazy"  src="https://blog.d2velop.fr/media/posts/26/ruby_payroll_srp.png" alt="srp Payroll"  sizes="(max-width: 48em) 100vw, 768px" srcset="https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-xs.png 300w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-sm.png 480w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-md.png 768w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-lg.png 1024w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-xl.png 1360w ,https://blog.d2velop.fr/media/posts/26/responsive/ruby_payroll_srp-2xl.png 1600w">
</figure>

<p>En conclusion, SRP, est un principe qui permet de garantir que le code est correctement reparti dans des UdC qui facilitent la lecture, le test et les modifications à venir. En revanche, on se retrouve avec beaucoup plus de fichiers par rapport à une approche traditionnelle basée sur les concepts réels (e.g. Employee). </p><p>Je vous invite à avoir ce principe en tête lorsque vous codez. Le gain apporté par son utilisation en termes de maintenance et d’évolution en vaut vraiment le coup.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Principes SOLID - Intro</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/principes-solid-intro-2/"/>
        <id>https://blog.d2velop.fr/principes-solid-intro-2/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/24/solid.png" medium="image" />
            <category term="Code"/>

        <updated>2023-05-12T09:00:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/24/solid.png" alt="" />
                    Les principes SOLID sont un ensemble de cinq principes de conception logicielle qui ont été développés par Robert C. Martin, également connu sous le nom d'Oncle Bob. Ils ont été formulés pour aider les développeurs à créer des logiciels qui sont faciles à comprendre, à modifier&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/24/solid.png" class="type:primaryImage" alt="" /></p>
                <p>Les principes SOLID sont un ensemble de cinq principes de conception logicielle qui ont été développés par Robert C. Martin, également connu sous le nom d'Oncle Bob. Ils ont été formulés pour aider les développeurs à créer des logiciels qui sont faciles à comprendre, à modifier et à maintenir.</p>
<p>Il y a un principe pour chaque lettre de l'acronyme SOLID :</p>
<ol>
<li>
<p><a href="https://blog.d2velop.fr/le-principe-de-responsabilite-unique/">Le principe de responsabilité unique</a> (<strong>S</strong>RP: Single Responsibility Principle) : Une classe ne devrait avoir qu'une seule raison de changer.</p>
</li>
<li>
<p><a href="https://blog.d2velop.fr/le-principe-ouvertferme/">Le principe d'ouverture/fermeture</a> (<strong>O</strong>CP: Open/Close Principle) : Les entités logicielles (classes, modules, fonctions, etc.) devraient être ouvertes à l'extension mais fermées à la modification.</p>
</li>
<li>
<p><a href="https://blog.d2velop.fr/le-principe-de-substitution-de-liskov/">Le principe de substitution de Liskov</a> (<strong>L</strong>SP: Liskov Substitution Principle) : Les objets d'une classe dérivée devraient pouvoir être substitués à la place des objets de la classe de base sans altérer la cohérence du programme.</p>
</li>
<li>
<p><a href="https://blog.d2velop.fr/le-principe-de-segregation-des-interfaces/">Le principe de ségrégation d'interface</a> (<strong>I</strong>SP: Interface Segregation Principle) : Les clients ne devraient pas être forcés d'implémenter des interfaces qu'ils n'utilisent pas.</p>
</li>
<li>
<p><a href="https://blog.d2velop.fr/le-principe-dinjection-de-dependance/">Le principe d'inversion de dépendance</a> (<strong>D</strong>IP: Dependency Injection Principle) : Les modules de haut niveau ne devraient pas dépendre des modules de bas niveau. Les deux devraient dépendre d'abstractions.</p>
</li>
</ol>
<p>Voici quelques-uns des avantages de l'application des principes SOLID en programmation orientée objet :</p>
<ol>
<li>
<p><strong>Une meilleure organisation du code</strong> : Les principes SOLID permettent d'organiser le code de manière à ce qu'il soit facile à comprendre et à modifier. En appliquant le SRP, par exemple, vous vous assurez que chaque classe n'est qu'une seule raison de changer ce qui facilite la compréhension et la modification du code.</p>
</li>
<li>
<p><strong>Une meilleure maintenabilité</strong> : En appliquant les principes SOLID, vous pouvez rendre votre code plus facile à maintenir. En suivant le principe OCP, par exemple, vous pouvez étendre les fonctionnalités de votre logiciel sans avoir à modifier le code existant. Cela rend les changements plus simples et limite les bugs.</p>
</li>
<li>
<p><strong>Une meilleure évolutivité</strong> : En appliquant les principes SOLID, vous pouvez rendre votre code plus facile à étendre. En suivant le principe ISP, par exemple, vous pouvez créer des interfaces spécifiques à chaque client, ce qui vous permet de faire évoluer votre logiciel en fonction des besoins de chaque client sans avoir à modifier le code existant.</p>
</li>
<li>
<p><strong>Une meilleure testabilité</strong> : Les principes SOLID permettent de rendre votre code plus facile à tester. En suivant le principe LSP, par exemple, vous pouvez vous assurer que vos classes dérivées sont conformes aux contrats de leurs classes de base, ce qui facilite les tests unitaires.</p>
</li>
</ol>
<p>Ces principes font aujourd'hui parti des fondamentaux de la programmation orientée objet. Ils peuvent aider les développeurs à créer des logiciels plus faciles à comprendre, à modifier, à maintenir et à tester.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>I&#x27;m back</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/im-back/"/>
        <id>https://blog.d2velop.fr/im-back/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/25/cgerard_A_terminator_like_men_Schwarzenegger_with_sunglasses_ge_76cbd3a8-a12c-4b6a-a704-9c538b99523f.png" medium="image" />

        <updated>2023-05-10T23:00:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/25/cgerard_A_terminator_like_men_Schwarzenegger_with_sunglasses_ge_76cbd3a8-a12c-4b6a-a704-9c538b99523f.png" alt="" />
                    Il y a plus d’un an et demi maintenant, j’ai arrêté le mentorat avec D2velop faute d’énergie. Je pensais pouvoir continuer à écrire des articles régulièrement, mais finalement j’ai également abandonné cette activité. Aujourd’hui, je suis plus posé et je compte me remettre à publier&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/25/cgerard_A_terminator_like_men_Schwarzenegger_with_sunglasses_ge_76cbd3a8-a12c-4b6a-a704-9c538b99523f.png" class="type:primaryImage" alt="" /></p>
                <p>Il y a plus d’un an et demi maintenant, j’ai arrêté le mentorat avec D2velop faute d’énergie. Je pensais pouvoir continuer à écrire des articles régulièrement, mais finalement j’ai également abandonné cette activité.</p><p>Aujourd’hui, je suis plus posé et je compte me remettre à publier toutes les semaines sur le blog. Pour la reprise, je vais me lancer dans une série d’articles sur les principes SOLID.</p><p>J’espère pouvoir vous éclairer sur ce sujet et vous aider à produire un code de meilleure qualité.</p><p>Pour ce retour, j’ai décidé de refondre entièrement le site afin qu’il soit plus moderne et facile à maintenir. J’en profite pour passer une petite annonce : si vous avez la volonté de partager vos connaissances par l’écriture, mais que vous ne souhaitez pas gérer un site, je serai ravi de vous aider à passer le cap et à publier vos écrits sur D2velop.</p><p>Je vous dis à bientôt.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Savoir arrêter</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/savoir-arreter/"/>
        <id>https://blog.d2velop.fr/savoir-arreter/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/23/youtuber-2838945_1280.jpg" medium="image" />
            <category term="Développeur Mindset"/>

        <updated>2022-01-27T09:00:00+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/23/youtuber-2838945_1280.jpg" alt="" />
                    Il y a des moments où il faut savoir se lancer dans des projets, prendre son courage à deux mains, sa motivation et sauter le pas. Ce n’est pas évident. Mais ça l’est encore moins lorsqu’il faut prendre la décision d’arrêter. Savoir dire stop est&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/23/youtuber-2838945_1280.jpg" class="type:primaryImage" alt="" /></p>
                <p>Il y a des moments où il faut savoir se lancer dans des projets, prendre son courage à deux mains, sa motivation et sauter le pas. Ce n’est pas évident. Mais ça l’est encore moins lorsqu’il faut prendre la décision d’arrêter.</p><p>Savoir dire stop est pourtant indispensable afin de se préserver. Il y a des projets ou s’entêter coûte beaucoup plus d’énergie que ce que ça nous apporte. À la fin, le bilan est négatif et c’est notre santé qui va en pâtir. Attention, le retour sur investissement n’est pas toujours pécunier. On peut trouver dans la satisfaction, dans l’accomplissement et dans la reconnaissance bien plus que dans l’argent. Il faut néanmoins que cela soit à la hauteur de l’effort fourni.</p><p>Lorsque j’ai lancé d2velop j’avais une ambition, je voulais transmettre ce que j’avais appris pendant mes années de pratique. Je voulais également répondre à une problématique que j’avais perçue sur le marché de l’emploi, l’inadéquation entre l’offre et le demande pour le recrutement des devs.</p><p>Mon constat, c’était qu’on a besoin de développeurs, mais pas de codeurs. Les entreprises ont moins besoin de techniciens qui maîtrisent des outils (langage, framework) que de développeurs qui ont des connaissances dans les techniques de développement logiciel. Seulement, quasiment toutes les formations courtes, en lignes, les bootcamp de reconversion qu’on trouve aujourd’hui forment par les outils. Le résultat, c’est que les juniors qui arrivent sur le marché n’ont pas les compétences attendues. Cela pose de réels problèmes d’insertion et des difficultés dans les recrutements.</p><p>Je voulais offrir un accompagnement pour les juniors qui sortent tout juste de formation. Ce mentorat se voulait dédié à la transmission des connaissances qui sont zappées par ces formations, l’algorithmie, la compréhension du matériel, le cloud, l’architecture logiciel, les tests, la POO, le travail en équipe et bien plus encore.</p><p>J’ai donc monté un groupe en intégrant des développeurs juniors pour tester mon offre. Après pas mal de galères et de fatigue, je suis arrivé à une version qui semblait pouvoir marcher et qui correspondait aux attentes des mentorés. Il m’aura fallu presque deux ans et beaucoup d’investissement pour arriver à ce résultat.</p><p>Aujourd’hui, pourtant, je vais arrêter le mentorat. Bien que le concept semble bon et qu’il y ai de la demande, ça ne prend pas. J’ai beau avoir rassemblé un groupe de 8 personnes à suivre, la participation ne décolle pas. J’ai fait plusieurs coding dojo avec seulement une seule participante. Il y a peu d’échange sur le Discord du groupe et si je n’anime pas, il ne se passe rien. Même en partageant sur le groupe il n’y a pas vraiment eu d’échange en retour.</p><p>Je pense clairement que je n’ai pas été assez bon animateur et que je n’ai pas réussi à mettre l’énergie qu’il faut pour que ce projet décolle. Animer un groupe et transmettre demande beaucoup d’énergie et un investissement conséquent. Avec un travail à temps plein et une vie de famille, je n’ai pas pu suffisamment m’investir pour créer l’émulsion nécessaire.</p><p>Je ne me considère pas comme unique responsable de cette situation. J’ai également été découragé par les inscriptions qui sont restées sans suite après de nombreux échanges. J’ai été découragé par le non-investissement des gens lors des événements et sur le groupe. Clairement, je pense qu’une grande majorité de dev juniors n’a pas conscience de l’effort à fournir pour devenir un bon développeur ou ne cherche tout simplement pas à le devenir. Leur but, c’est de décrocher un job, et ils ont tendance à considérer ça plus comme une finalité que comme un point de départ.</p><p>Une autre erreur est de proposer cela gratuitement. Je m’adresse à des gens qui n’ont pas beaucoup de moyens et je prenais du plaisir à créer les contenus et à animer les formations et les dojos. Le problème, c’est que lorsqu’on ne paie pas, on ne s’investit pas forcément. De point de vue de l’animateur, lorsqu’il n’est pas rémunéré à sa juste valeur, les moments difficiles, ceux où le plaisir n’est plus là, ceux où il y peu de retours, sont difficiles à surmonter.</p><p>C’est suite à ces constats que je décide d’arrêter le mentorat avec d2velop. En priorisant ce qui est important pour moi, je me rends compte que je n’ai ni l’énergie, ni le temps pour continuer. Je ne retire plus rien des efforts que je pourrai fournir et je veux mieux valoriser mon temps sur d’autres projets.</p><p>Je compte conserver le blog de d2velop qui me servira à publier des articles régulièrement. Je n’abandonne pas du tout mon ambition d’aider les développeurs juniors à entrer sur le marché du trabail. Seulement cette fois-ci, je compte m’attaquer directement au problème au niveau de la formation.</p><p>On se retrouve bientôt pour un tout nouveau projet.</p>
            ]]>
        </content>
    </entry>
</feed>
