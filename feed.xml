<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>d2velop</title>
    <link href="https://blog.d2velop.fr/feed.xml" rel="self" />
    <link href="https://blog.d2velop.fr" />
    <updated>2023-05-10T23:06:36+02:00</updated>
    <author>
        <name>Cédric Gérard</name>
    </author>
    <id>https://blog.d2velop.fr</id>

    <entry>
        <title>I&#x27;m back</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/im-back/"/>
        <id>https://blog.d2velop.fr/im-back/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/25/cgerard_A_terminator_like_men_Schwarzenegger_with_sunglasses_ge_76cbd3a8-a12c-4b6a-a704-9c538b99523f.png" medium="image" />

        <updated>2023-05-10T23:06:36+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/25/cgerard_A_terminator_like_men_Schwarzenegger_with_sunglasses_ge_76cbd3a8-a12c-4b6a-a704-9c538b99523f.png" alt="" />
                    Il y a plus d’un an et demi maintenant, j’ai arrêté le mentorat avec D2velop faute d’énergie. Je pensais pouvoir continuer à écrire des articles régulièrement, mais finalement j’ai également abandonné cette activité. Aujourd’hui, je suis plus posé et je compte me remettre à publier&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/25/cgerard_A_terminator_like_men_Schwarzenegger_with_sunglasses_ge_76cbd3a8-a12c-4b6a-a704-9c538b99523f.png" class="type:primaryImage" alt="" /></p>
                <p>Il y a plus d’un an et demi maintenant, j’ai arrêté le mentorat avec D2velop faute d’énergie. Je pensais pouvoir continuer à écrire des articles régulièrement, mais finalement j’ai également abandonné cette activité.</p>
<p>Aujourd’hui, je suis plus posé et je compte me remettre à publier toutes les semaines sur le blog. Pour la reprise, je vais me lancer dans une série d’articles sur les principes SOLID.</p>
<p>J’espère pouvoir vous éclairer sur ce sujet et vous aider à produire un code de meilleure qualité.</p>
<p>Pour ce retour, j’ai décidé de refondre entièrement le site afin qu’il soit plus moderne et facile à maintenir. J’en profite pour passer une petite annonce : si vous avez la volonté de partager vos connaissances par l’écriture, mais que vous ne souhaitez pas gérer un site, je serai ravi de vous aider à passer le cap et à publier vos écrits sur D2velop.</p>
<p>Je vous dis à bientôt.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Savoir arrêter</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/savoir-arreter/"/>
        <id>https://blog.d2velop.fr/savoir-arreter/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/23/youtuber-2838945_1280.jpg" medium="image" />
            <category term="Développeur Mindset"/>

        <updated>2023-05-10T00:03:58+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/23/youtuber-2838945_1280.jpg" alt="" />
                    Il y a des moments où il faut savoir se lancer dans des projets, prendre son courage à deux mains, sa motivation et sauter le pas. Ce n’est pas évident. Mais ça l’est encore moins lorsqu’il faut prendre la décision d’arrêter. Savoir dire stop est&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/23/youtuber-2838945_1280.jpg" class="type:primaryImage" alt="" /></p>
                <p>Il y a des moments où il faut savoir se lancer dans des projets, prendre son courage à deux mains, sa motivation et sauter le pas. Ce n’est pas évident. Mais ça l’est encore moins lorsqu’il faut prendre la décision d’arrêter.</p>
<p>Savoir dire stop est pourtant indispensable afin de se préserver. Il y a des projets ou s’entêter coûte beaucoup plus d’énergie que ce que ça nous apporte. À la fin, le bilan est négatif et c’est notre santé qui va en pâtir. Attention, le retour sur investissement n’est pas toujours pécunier. On peut trouver dans la satisfaction, dans l’accomplissement et dans la reconnaissance bien plus que dans l’argent. Il faut néanmoins que cela soit à la hauteur de l’effort fourni.</p>
<p>Lorsque j’ai lancé d2velop j’avais une ambition, je voulais transmettre ce que j’avais appris pendant mes années de pratique. Je voulais également répondre à une problématique que j’avais perçue sur le marché de l’emploi, l’inadéquation entre l’offre et le demande pour le recrutement des devs.</p>
<p>Mon constat, c’était qu’on a besoin de développeurs, mais pas de codeurs. Les entreprises ont moins besoin de techniciens qui maîtrisent des outils (langage, framework) que de développeurs qui ont des connaissances dans les techniques de développement logiciel. Seulement, quasiment toutes les formations courtes, en lignes, les bootcamp de reconversion qu’on trouve aujourd’hui forment par les outils. Le résultat, c’est que les juniors qui arrivent sur le marché n’ont pas les compétences attendues. Cela pose de réels problèmes d’insertion et des difficultés dans les recrutements.</p>
<p>Je voulais offrir un accompagnement pour les juniors qui sortent tout juste de formation. Ce mentorat se voulait dédié à la transmission des connaissances qui sont zappées par ces formations, l’algorithmie, la compréhension du matériel, le cloud, l’architecture logiciel, les tests, la POO, le travail en équipe et bien plus encore.</p>
<p>J’ai donc monté un groupe en intégrant des développeurs juniors pour tester mon offre. Après pas mal de galères et de fatigue, je suis arrivé à une version qui semblait pouvoir marcher et qui correspondait aux attentes des mentorés. Il m’aura fallu presque deux ans et beaucoup d’investissement pour arriver à ce résultat.</p>
<p>Aujourd’hui, pourtant, je vais arrêter le mentorat. Bien que le concept semble bon et qu’il y ai de la demande, ça ne prend pas. J’ai beau avoir rassemblé un groupe de 8 personnes à suivre, la participation ne décolle pas. J’ai fait plusieurs coding dojo avec seulement une seule participante. Il y a peu d’échange sur le Discord du groupe et si je n’anime pas, il ne se passe rien. Même en partageant sur le groupe il n’y a pas vraiment eu d’échange en retour.</p>
<p>Je pense clairement que je n’ai pas été assez bon animateur et que je n’ai pas réussi à mettre l’énergie qu’il faut pour que ce projet décolle. Animer un groupe et transmettre demande beaucoup d’énergie et un investissement conséquent. Avec un travail à temps plein et une vie de famille, je n’ai pas pu suffisamment m’investir pour créer l’émulsion nécessaire.</p>
<p>Je ne me considère pas comme unique responsable de cette situation. J’ai également été découragé par les inscriptions qui sont restées sans suite après de nombreux échanges. J’ai été découragé par le non-investissement des gens lors des événements et sur le groupe. Clairement, je pense qu’une grande majorité de dev juniors n’a pas conscience de l’effort à fournir pour devenir un bon développeur ou ne cherche tout simplement pas à le devenir. Leur but, c’est de décrocher un job, et ils ont tendance à considérer ça plus comme une finalité que comme un point de départ.</p>
<p>Une autre erreur est de proposer cela gratuitement. Je m’adresse à des gens qui n’ont pas beaucoup de moyens et je prenais du plaisir à créer les contenus et à animer les formations et les dojos. Le problème, c’est que lorsqu’on ne paie pas, on ne s’investit pas forcément. De point de vue de l’animateur, lorsqu’il n’est pas rémunéré à sa juste valeur, les moments difficiles, ceux où le plaisir n’est plus là, ceux où il y peu de retours, sont difficiles à surmonter.</p>
<p>C’est suite à ces constats que je décide d’arrêter le mentorat avec d2velop. En priorisant ce qui est important pour moi, je me rends compte que je n’ai ni l’énergie, ni le temps pour continuer. Je ne retire plus rien des efforts que je pourrai fournir et je veux mieux valoriser mon temps sur d’autres projets.</p>
<p>Je compte conserver le blog de d2velop qui me servira à publier des articles régulièrement. Je n’abandonne pas du tout mon ambition d’aider les développeurs juniors à entrer sur le marché du trabail. Seulement cette fois-ci, je compte m’attaquer directement au problème au niveau de la formation.</p>
<p>On se retrouve bientôt pour un tout nouveau projet.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Les microservices</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/les-microservices/"/>
        <id>https://blog.d2velop.fr/les-microservices/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/22/network-3849202_1280.webp" medium="image" />
            <category term="Code"/>

        <updated>2023-05-08T21:22:44+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/22/network-3849202_1280.webp" alt="Schéma réseau informatique" />
                    Depuis quelques années, on entend beaucoup parler de microservices. Mais qui a-t-il réellement dernière cette dénomination ? Et surtout qu’est-ce que cela implique sur un projet ? Les microservices sont à la mode depuis quelques années. Ils ont été popularisés par des géants comme Netflix&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/22/network-3849202_1280.webp" class="type:primaryImage" alt="Schéma réseau informatique" /></p>
                <p>Depuis quelques années, on entend beaucoup parler de microservices. Mais qui a-t-il réellement dernière cette dénomination ? Et surtout qu’est-ce que cela implique sur un projet ?</p>
<h3 id="un-effet-de-mode-">Un effet de mode ?</h3>
<p>Les microservices sont à la mode depuis quelques années. Ils ont été popularisés par des géants comme Netflix ou Amazon, pour ne citer qu’eux, qui communiquent beaucoup sur leurs solutions techniques. Comme souvent chaque communication ou projet open source lancée par ce genre de géant à tendance à créer un effet de mode qui est souvent repris dans les startups du moment.</p>
<p>Cela n’a pas manqué pour les microservices qui se sont vu présenter comme la solution ultime à tous les soucis des applications actuelles en terme de scalabilité, de couplage et de maintenabilité.</p>
<h3 id="microservices-quésaco-">Microservices, quésaco ?</h3>
<p>Tout d’abord, que met-on derrière miroservice ? En fait, il ne s’agit pas d’une grande révolution par rapport à ce qu’on était capable de faire à l’époque. Il s’agit d’une variante des architectures orientées services (SOA – service-oriented architecture) avec comme particularité de découpé les services le plus finement possible. Avant cette approche, les solutions étaient déjà découpées afin de gérer la scalabilité de chaque partie spécifiquement. Le principe des microservices tient dans le terme « micro ». Ces derniers doivent être le plus petit possible et le plus simple possible. La conséquence est qu’on se retrouve vite avec un grand nombre de services à déployer et maintenir.</p>
<p>Dans les faits, pas de révolution, il s’agit d’une approche architecturale différente de ce qu’on faisait auparavant. Cette approche a été rendue possible avec deux évolutions techniques majeurs au niveau infrastructure et déploiement. La première, c’est le développement du cloud et des services d’hébergements. La deuxième est la conteneurisation des applications. Comme je vous l’ai expliqué au paragraphe précédent, avec les microservices on se retrouve à déployer beaucoup d’unité et on doit être capable de gérer les déploiements de chaque service indépendamment. Docker et les plateformes cloud comme AWS, Azur et Google Cloud ont ouvert la voie avec des outils permettant de répondre à ces besoins.</p>
<p>Quand on parle de beaucoup de services, il faut voir ce découpage comme le plus petit possible d’un point de vue technique et le plus proche possible du métier. En gros, on se retrouve avec au minimum un service par fonctionnalité. Bien souvent, les contraintes techniques ou les dépendances externes amènent à avoir plusieurs services pour une seule fonctionnalité. Au final, notre application peut compter plusieurs dizaines de services dans les cas simples et plusieurs centaines pour un gros projet. Cela demande d’avoir une plateforme de déploiement qui tient la route et un monitoring au top.</p>
<p>Il reste une dernière problématique qui est la communication entre ces services. Dans la plupart des cas, les services ne sont pas tous au même niveau. Vous allez, par exemple, avoir une API comme point d’entrée ou une application en front. Et les appels vont déclencher tout un enchaînement d’actions dans vos services pour aboutir au résultat attendu. Il y a une grosse partie d’échange entre ces derniers qui apporte un autre niveau de complexité. En effet, votre application ne doit pas planter si un service et hors d’usage. Vous devez être capable de tracer les échanges et reproduire les actions afin d’éviter les pertes de données et pouvoir comprendre les comportements en production. Pour cela, on utilise des “message brocker” (Kafka, RabbitMQ, etc.) pour gérer les échanges et la synchronisation des services. Cette partie est souvent celle qui est négligée et encore plus souvent sous-estimée, mais c’est pourtant la plus critique. Il faut bien comprendre que votre brocker va acheminer une importante quantité de messages. Avoir plusieurs millions de messages par jours n’est pas rare sur une application de taille normale.</p>
<h3 id="la-solution-ultime-">La solution ultime ?</h3>
<p>Pour être honnête, je n’ai jamais vu un système conçu sur la base de microservice bien conçu. J’ai à chaque fois, sois eu un surcoût monstrueux en maintenance à cause de mauvais choix techniques ou un découpage raté qui aboutit plutôt à des macroservices. Dans le dernier cas, on se retrouve avec la complexité des microservice et la lourdeur d’une application monolithique. C’est certainement ça qui a fait la mauvaise réputation des systèmes distribués à une époque pas si lointaine.</p>
<p>Au final est-ce que le coût des microservices en vaut la peine. Je dirai que dans 95 % des cas, non. Il faut comprendre que les microservice répondent principalement à des problématiques de scalabilité par une optimisation des déploiements. La capacité de scaler unitairement et dynamiquement chaque service est un besoin assez rare qu’on retrouve chez les géants du numérique. Les besoins de Netflix ou Facebook sont à des années-lumière de ce qu’on peut retrouver dans les projets communs même s’ils paraissent énormes.</p>
<p>Le problème des microservices et qu’ils nécessitent dès le début une infrastructure lourde, qu’ils ajoutent un surcoût non négligeable sur les aspects synchronisation entre services et qu’ils sollicites beaucoup plus la couche réseau. </p>
<p>Au-delà de la scalabilité on vente les microservices pour résoudre des problèmes de couplage dans une application. Je suis personnellement en désaccord avec cette affirmation. Dans les faits, les microservice s’intéressent au découpage d’une application et offrent des opportunités au niveau du déploiement d’une solution, ils ne changent pas grand-chose côté code. Vous pouvez avoir autant de couplage entre de services distribués que dans un monolithe. Et à l’inverse avoir un monolithe qui ne souffre d’aucun problème de couplage et qui d’ailleurs pourrait être découpé facilement par la suite si besoin. Il faut aussi avoir en tête que même si les microservice permettent une gestion plus fine des déploiements ils coûte aussi beaucoup plus cher niveau infrastructure.</p>
<h3 id="ma-vision-des-microservices">Ma vision des microservices</h3>
<p>Si d’aventure vous voulez quand même vous lancer voici les conseils que je pourrais donner suite à mes retours d’expériences:</p>
<ul>
<li><p>Découper votre application en services en fonction de vos contextes métier et le plus finement possible. Un service ne doit avoir qu’une seule responsabilité</p>
</li>
<li><p>Créer un service pour encapsuler chaque dépendance externe</p>
</li>
<li><p>Vos services doivent exposer des contrats clairs tant concernant les API que les messages qui passent par votre brocker. Il est nécessaire de définir ces contrats dès le début (c’est un moyen d’éviter les couplages implicites)</p>
</li>
<li><p>Penser que dans les microservices on privilégie la remplaçabilité à l’évolutivité. J’entends par là que, contrairement à un monolithe, on ne va pas forcément modifier une service existant pour changer son comportement, mais plutôt coder un nouveau service qui le remplacera à terme. Ainsi, il n’y a pas de risque de casser l’existant et le rollback est facile à automatiser via l’orchestrateur de services. Vous comprendrez que cette technique n’est faisable que si vos interfaces de services sont contractualisées et ce n’est rentable que si vos services sont « micro ». Je peux illustrer ce point avec un service de cartographie. Vous avez un service existant qui se base sur GoogleMap. Vous décidez pour de changer pour le service HereMap. Vous ne faites pas de modification dans le service existant. Vous allez implémenter un nouveau service qui utilise HereMap et qui va implémenter le même contrat que l’ancien. Ensuite, vous remplacerez l’ancien service au déploiement</p>
</li>
<li><p>Concernant vos messages, ils doivent être le plus précis possible. Par exemple, si vous avez un service qui gère vos clients. Lors d’une mise à jour de l’e-mail, il ne faut pas envoyer un message de mise à jour avec comme payload tout le client. Une bonne pratique serait d’envoyer un message avec uniquement l’information de ce qui a été changée</p>
</li>
<li><p>Conteneuriser vos services dès le début</p>
</li>
</ul>
<p>En conclusion, pour un nouveau projet, je n’opterai pas pour les microservices dès le début. Je commencerai par un monolithe en m’appuyant sur des pratiques comme les DDD, BDD ainsi que sur l’architecture hexagonale pour éviter le couplage et définir les contextes métiers de mon application. Avec cette approche, il est toujours possible de sortir un contexte dans son propre service plus tard pour répondre à un problème particulier de déploiement ou de scalabilité unitaire. Il est très rare d’atteindre les limites d’une application monolithique même sur un gros service. La plupart du temps, c’est l’état du code qui est la cause des limitations et non la typologie de la solution.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>La confiance</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/la-confiance/"/>
        <id>https://blog.d2velop.fr/la-confiance/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/21/cat-5690627_1280.webp" medium="image" />
            <category term="Développeur Mindset"/>

        <updated>2023-05-08T21:17:18+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/21/cat-5690627_1280.webp" alt="" />
                    Vous l’avez sans doute remarqué, mais on parle beaucoup du syndrome de l’imposteur en ce moment, et pas mal chez les développeurs juniors qui ne sentent pas à leur place. C’est effectivement un sentiment qu’on peut avoir lorsqu’on a pas assez confiance en ses capacités.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/21/cat-5690627_1280.webp" class="type:primaryImage" alt="" /></p>
                <p>Vous l’avez sans doute remarqué, mais on parle beaucoup du syndrome de l’imposteur en ce moment, et pas mal chez les développeurs juniors qui ne sentent pas à leur place.</p>
<p>C’est effectivement un sentiment qu’on peut avoir lorsqu’on a pas assez confiance en ses capacités. Le problème, c’est que ce n’est pas réservé aux juniors. Dans le cadre d’une reconversion « rapide », il parait évident que la différence de niveau entre ce qui est attendu sur le marché et ce qu’on a acquis en formation peut amener à douter de soi. Mais au-delà de ça le manque de confiance se retrouve à tous les niveaux d’expériences.</p>
<p>On peut manquer de confiance lors d’une prise de poste, lors d’un changement de projet, d’un changement d’environnement technique. Bref, lors d’un changement, quoi. On peut aussi ne jamais obtenir cette précieuse confiance en soi et survire dans le milieu professionnel en espérant que personne en découvre qu’au final nous n’avons pas le niveau suffisant.</p>
<p>À moins que toutes les personnes, formateurs et collègues que nous ayons côtoyé nous aient prouvé que nous sommes mauvais, le problème vient de nous. Il s’agit simplement de la perception que nous avons de nous-même au regard des attentes des autres. C’est extrêmement difficile d’être objectif là-dessus, encore plus si vous avez tendance à être dur avec vous-même.</p>
<p>Alors comment peut-on faire pour bâtir sa confiance en soi ? Je ne suis pas psychologue donc je vais me contenter de parler de ce que je connais et du métier de développeur. Il s’agit ici d’un contexte précis et de retour basé sur ma propre expérience.</p>
<p>Tout d’abord, il faut comprendre que le métier de développeur est un métier où on est souvent très exposé. J’entends par là que le code, l’application ou la solution que l’on produit sera jugé dans tous les sens et par tout un paquet de personnes. Vous allez avoir des retours d’utilisateurs lors de feedback, de vos collègues développeurs lors des revues de code ou en pair programming, de POs et autres lors des phases de QA, etc. Bref vous aller être jugé en permanence.</p>
<p>En fait, non, et ça, j’ai mis un moment (3/4 ans) à le comprendre. Les gens ne vous jugent pas vous ! Ils jugent uniquement le résultat d’un travail (qui est bien souvent collectif) au regard d’attente métier et d’objectifs précis. Il faut aussi comprendre que ce que vous produisez ne vous appartient pas. Le code est un tout dans lequel tout le monde travail, vous ne devez pas vous l’approprier. Il faut avoir conscience que tout le monde doit pouvoir reprendre votre travail et comprendre ce que vous avez fait. Nous produisons en permanence pour les autres et non pour nous-même.</p>
<p>Lorsqu’on a compris cela, on peut se détacher du jugement des autres. On prend du recul sur ce qu’on produit et on devient capable d’accepter un retour (même s’il est maladroit) pour ce qu’il peut nous apporter de positif. C’est comme cela qu’on s’améliore en réalité.</p>
<p>La confiance, elle se bâtit en se confrontant aux autres. Il ne faut pas hésiter à aller à la rencontre de personnes qualifiées et surtout reconnues dans le milieu pour échanger. Il faut participer à des projets d’équipe. Il faut montrer son code et demander des revues pour avoir des retours concrets sur nos pratiques. Il faut faire du pair programming avec des développeurs plus compétents que nous pour apprendre en live. En résumé, il faut s’exposer et accueillir les retours en prenant tout ce qui nous fera avancer.</p>
<p>Je vois souvent des dev juniors qui demandent un retour sur un projet un donnant le lien de l’application ou en envoyant des captures de l’interface. Je vais être clair, si votre objectif, c’est le design, c’est ok, si c’est de l’intégration web, c’est déjà limite, mais pour du dev ça ne sert à rien du tout. Vous n’apprendrez pas grand-chose avec des retours qui seront très subjectifs sur votre page d’accueil.</p>
<p>Il faut montrer du code, proposer le dépôt GitHub et demander une revue du projet afin d’avoir des retours constructifs sur l’architecture, les patterns, les problèmes de couplages, les dépendances, les tests, etc. Au fur et à mesure que vous vous améliorez, les retours seront de moins en moins nombreux et ça, c’est bon pour la confiance.</p>
<p>Un autre bon moyen de gagner en confiance et de se mettre dans la peau du relecteur. Passer du temps à lire le code des autres permet de se positionner par rapport à d’autres développeurs. Il est évident qu’au début, on ne comprend pas grand-chose et que ce n’est pas facile de faire des commentaires intéressants. Mais c’est un excellent moyen d’apprendre en démystifiant certaines pratiques et en posant des questions. Encore une fois et avec l’expérience, on fait de plus en plus de retour pertinents. Lorsque l’on prend conscience de l’influence qu’on a sur une pull request ou les choix des autres, on gagne énormément en confiance.</p>
<p>Il faut garder à l’esprit qu’au royaume des aveugles les borgnes sont rois, j’entends pas là que si vous êtes continuellement entouré de bras cassés et bien vous allez passer pour l’expert même en étant très moyen. Vous allez donc bâtir une fausse estime de vous et cela peut parfois conduire à tomber de haut.</p>
<p>Mes derniers conseils sont de s’inspirer de personnes compétentes et de trouver un ou des mentors qui partage leurs expériences, de lire des livres qui sont des références en terme de pratique technique, de vous former continuellement et de toujours savoir vous remettre en question. Vous pouvez également intégrer des communautés de dev et participer à des événements lors de meetup. Le mieux étant de diversifier ses actions afin de progresser, gagner en confiance et entretenir son réseau.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Les dogmes dans l&#x27;informatique</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/les-dogmes-dans-linformatique/"/>
        <id>https://blog.d2velop.fr/les-dogmes-dans-linformatique/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/20/good-vs-evil-5059839_1280.jpg" medium="image" />
            <category term="Développeur Mindset"/>

        <updated>2023-05-08T21:14:26+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/20/good-vs-evil-5059839_1280.jpg" alt="Poing de glace VS poing de feu" />
                    L’informatique est un domaine immense et passionnant. Cependant, il n’est pas rare de rencontrer au détour d’une discussion de prises de position qui sont parfois difficiles à expliquer. Il y a un paradoxe qui m’a toujours frappé depuis que je suis dans ce milieu et&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/20/good-vs-evil-5059839_1280.jpg" class="type:primaryImage" alt="Poing de glace VS poing de feu" /></p>
                <p>L’informatique est un domaine immense et passionnant. Cependant, il n’est pas rare de rencontrer au détour d’une discussion de prises de position qui sont parfois difficiles à expliquer.</p>
<p>Il y a un paradoxe qui m’a toujours frappé depuis que je suis dans ce milieu et particulièrement dans le développement web. Bien qu’il faille une grande ouverture d’esprit pour un bon développeur bon, nombre de personnes font parfois preuve d’un dogmatisme incroyable.</p>
<p>On rencontre souvent cette posture lors d’échanges futiles sur la marque de l’ordinateur à utiliser (le fameux Mac ou PC), sur le meilleur OS (MacOS, Linux, Windows) ou lors d’échange sur les frameworks. Les prises de positions dans ces cas sont très souvent peu argumentées et uniquement liées à l’affect. On peut rencontrer des échanges assez virulents, mais rien de bien intéressant n’en ressort en général.</p>
<p>Le problème est que cette attitude se retrouve également sur des sujets qui sont plus importants et surtout qui véhiculent des stéréotypes qui sont nuisibles à la longue. Parmi ceux-ci, on en trouve un qui m’agace particulièrement. C’est celui de véhiculer l’idée que pour devenir développeur, il suffit de pratiquer, qu’étudier ou lire ne sert pas à grand-chose, il faut faire et encore faire. Il n’y a rien de plus faux ! Pour être un bon développeur, il faut de la maîtrise technique, qui s’acquière avec l’expérience, et des connaissances pointus sur plein d’aspects autant théoriques que pratique. Les deux sont indissociables. Bien évidemment qu’on peut arriver à développer son site web juste en pratiquant. Mais cela ne fait pas de vous professionnel. De plus, il n’y a pas besoin d’être développeur pour faire un site ou une application mobile de nos jours. Je suis capable de découper du bois avec le matériel que j’ai acheté au magasin de bricolage du coin. J’ai réussi à construire la niche de mon chien avec en suivant des tutos. Est-ce que ça fait de moi un ébéniste ou un charpentier ? Bien sûr que non. Je serais bien à la peine si je devais refaire le toit de ma maison. Il en va de même avec le métier de développeur. Il ne suffit pas d’arriver à faire une application, encore faut-il le faire avec professionnalisme. Et c’est là qu’il faut des connaissances qui vont au-delà du code.</p>
<p>Il existe bien d’autres dogmes issus, le plus souvent, d’un manque de connaissance du milieu. Certains concernent les langages eux-mêmes. Dans le domaine du développement web, en particulier chez les juniors, il n’est pas rare d’entendre que le langage C est mort et que Java (pour ne citer que lui) ne va pas tarder à disparaître. La première fois que j’ai entendu parler de la fin de Java, on devait être en 2008. À l’époque Java 6 avait un peu plus d’un an d’existence. Il y a eu entre temps une nouvelle version par an, pour conduire Oracle, en septembre dernier, à sortir la version 17 de Java. Pas mal pour une technologie soi-disant à l’agonie.</p>
<p>Je ne vais pas faire ici la toute la litanie des dogmes qu’on peut rencontrer. Il faut avoir en tête que le monde de l’informatique bouge très vite sur certains aspects, mais qu’il repose sur un socle solide qui lui n’est pas révolutionné tous les jours. Il faut également voir qu’on fait partie d’un univers extrêmement vaste. Je parle ici pour les développeurs web qui ont tendance à ignorer que l’informatique est un domaine bien plus large que le web et que les technologies qui leur paraissent obsolètes sont parfois les fondations sur lesquelles ils doivent construisent.</p>
<p>Il est important d’avoir un état d’esprit fondamentalement prêt à la remise en question pour devenir un bon développeur. Il ne faut pas rester sur des certitudes si on n’est pas capable, soi-même, de les justifier avec un argumentaire ou des sources valables. C’est de cette manière qu’on évite de se bloquer sur une idée. Cela peut sembler rassurant, on a l’impression d’avoir des convictions, d’appartenir à un groupe. Au final, on perd notre capacité de jugement et on fini par se fermer à la réalité. Ceci peut avoir un mauvais impact sur notre employabilité future et nous faire tomber de haut.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>La place des langages</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/la-place-des-langages/"/>
        <id>https://blog.d2velop.fr/la-place-des-langages/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/19/place_des_langages.jpg" medium="image" />

        <updated>2023-05-08T21:10:48+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/19/place_des_langages.jpg" alt="Ecran avec du code source" />
                    Le métier de développeur. C’est aujourd’hui un métier très prisé. Il y a beaucoup de demandes sur le marché de l’emploi, les conditions de travail sont bonnes tout comme les salaires. Dans ce contexte, bon nombre de formations sont apparues pour former des développeurs s’appuyant&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/19/place_des_langages.jpg" class="type:primaryImage" alt="Ecran avec du code source" /></p>
                <p>Le métier de développeur. C’est aujourd’hui un métier très prisé. Il y a beaucoup de demandes sur le marché de l’emploi, les conditions de travail sont bonnes tout comme les salaires.</p>
<p>Dans ce contexte, bon nombre de formations sont apparues pour former des développeurs s’appuyant sur le « manque » de profils pour attirer du monde. Elles s’appuient sur les demandes des entreprises qui cherchent des développeurs RoR, React, Angular, Android, PhP, etc.</p>
<p>Elles se sont donc mises à former des profils pour ces technologies. On a vu fleurir un paquet de formations sur quelques mois, de bootcamps et de formations en ligne qui promettent de devenir développeur. Elles promettent qu’en sachant utiliser ces outils, on peut trouver un job rapidement parce que la demande est énorme dans le monde.</p>
<p>Si on regarde les choses simplement, ce n’est pas idiot. Les entreprises ont besoin de développeurs sur la techno machin, et bien, si on forme de gens pour développer avec cette techno, on répond à la demande et tout roule. Sauf que pas de bol, ce n’est pas aussi simple.</p>
<h3 id="un-développeur-nest-pas-bloqué-sur-un-langage">Un développeur n’est pas bloqué sur un langage</h3>
<p>En fait, cela ne marche que si on considère que les développeurs sont des ressources comme des machines à produire. C’est-à-dire qu’on peut remplacer n’importe quel développeur par un autre utilisant la même techno. Donc si on amène plus de ressources sur le marché les entreprises auront ce qu’elles demandent. Sauf qu’un employé n’est pas une machine et qu’un développeur est bien plus qu’un langage.</p>
<p>En fait, les langages ne sont qu’une infime partie des compétences nécessaires. Pire que ça, les langages ne sont pas des connaisances transposables facilement. Par exemple, une expertise PHP ne sert plus à rien si on se retrouve à devoir travailler sur un projet qui utilise Scala. C’est même pire quand on pense à AngularJs VS Angular2. En revanche, les compétences profondes qui font un bon développeur, ne sont pas limitées aux technologies. La maîtrise de la programmation orientée objet est valorisable de la même manière qu’on code en Java, TypeScript ou Ruby. La compréhension des architectures logicielles et des techniques de programmation le sont tout autant. Ce sont ces compétences qui sont importantes aujourd’hui et qui sont malheureusement manquantes sur le marché.</p>
<p>On imagine souvent un développeur collé derrière son écran à pondre des lignes de code. Mais c’est un stéréotype et surtout éloigné du métier d’un développeur aujourd’hui. On passe beaucoup plus de temps à réfléchir, modéliser, concevoir, échanger ou débattre qu’à écrire du code.</p>
<p>En fait, l’écriture du code est l’étape ultime d’un processus bien plus long. Et les langages de programmation sont les outils utilisés lors de cette étape. Pourtant, on continue de les mettre en avant comme s’ils étaient l’essentiel de notre métier.</p>
<p>Dans mes expériences, j’ai pratiqué plusieurs langages C, C++, Java, JavaScript, TypeScript, Python, Ruby, OCaml. Je ne suis jamais devenu un expert dans aucun langage ni aucun Framework, car je me suis toujours concentré sur des compétences qui vont au-delà des outils et je me suis aussi intéressé au métier. Heureusement que j’ai eu cette façon de voir les choses. Cela me permet d’être mobile, je peux m’adapter à n’importe quel outil (langage, Framework, IDE, plateforme, etc.) en fonction du besoin ou du contexte. Si je dois chercher un nouveau poste, je ne vais pas me limiter aux technologies utilisées. Je ne dis pas que je n’ai pas mes préférences, mais, l’entreprise, son contexte et son métier sont bien plus importants que le Framework qui a été choisi pour un service.</p>
<h3 id="quelle-place-laisser-aux-langages-">Quelle place laisser aux langages ?</h3>
<p>Quand on se pose la question de la place des langages dans le métier de développeur, il paraît évident qu’ils sont un des aspects les plus visibles. Certainement, parce qu’ils sont utilisés comme accroche sur les offres d’emploi. Parce qu’il semble plus facile de lier l’offre et la demande sur des noms de techno. Parce que cela semble plus aisé d’évaluer le niveau de quelqu’un en se concentrant sur cet aspect.</p>
<p>Le souci, c’est que cela revient à se concentrer sur un seul aspect du notre métier et je dirai qu’il ne s’agit même pas du plus important. J’embaucherais sans hésiter quelqu’un qui n’a jamais utilisé les langages de ma boite, mais qui vient avec la maîtrise du TDD, de l’architecture hexagonale et des concepts qui la composent. À l’inverse, je me poserais beaucoup plus de questions quant à prendre un expert dans le langage utilisé sans aucune connaissances des bonnes pratiques de notre métier. Avec une bonne compréhension des paradigmes de programmation et une bonne maîtrise des compétences profondes, un langage s’apprend rapidement. Il est, en revanche, beaucoup plus compliqué d’acquérir ces compétences lorsque notre expertise n’est bâtie que sur des outils.</p>
<h3 id="conseil-pour-les-développeurs-juniors-ou-en-formation">Conseil pour les développeurs juniors ou en formation</h3>
<p>Ne vous prenez pas le têtes sur les technologies. Elles n’ont pas autant de valeur qu’on peut vous le faire penser. Elles peuvent disparaître aussi vite qu’elles sont apparues. Au début, contentez-vous d’un ou deux langages (un front et un back par exemple) et d’un framework. Concentrez vos efforts sur des compétences plus valorisables, comme la POO (programmation orientée objet), les principes d’architecture, les designs patterns, l’algorithmie, les tests, le TDD (test driven development) et la liste est encore longue. Mais je peux vous garantir qu’avec ça dans votre arsenal, les entretiens techniques ne seront plus qu’une formalité.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>No Code</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/no-code/"/>
        <id>https://blog.d2velop.fr/no-code/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/18/nocode.png" medium="image" />
            <category term="No code"/>

        <updated>2023-05-08T21:07:56+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/18/nocode.png" alt="" />
                    Cela fait un moment qu’on entend parler de No Code, c’est aujourd’hui devenu un buzzword de plus, mais qui cache pourtant un véritable phénomène dans le monde de la tech. En tant que développeur, j’ai d’abord regardé le NoCode avec dédains. Faisant le parallèle avec&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/18/nocode.png" class="type:primaryImage" alt="" /></p>
                <p>Cela fait un moment qu’on entend parler de No Code, c’est aujourd’hui devenu un buzzword de plus, mais qui cache pourtant un véritable phénomène dans le monde de la tech.</p>
<p>En tant que développeur, j’ai d’abord regardé le NoCode avec dédains. Faisant le parallèle avec de vieux outils (bonjour dreamweaver) qui n’ont jamais vraiment percé. Puis j’ai essayé d’utiliser certains de ces outils pour voir ce qu’on pouvait faire avec et si c’était vraiment une révolution.</p>
<h2 id="retour-dexpérience-dun-dev">Retour d’expérience d’un dev</h2>
<p>J’ai tout d’abord tenté de faire avec du No Code ce que je pouvais faire en codant. Je suis plutôt dev back et donc je me suis amusé à automatiser certaines taches avec du Zappier et stocker des données avec Airtable. C’est clairement ultra facile à prendre en main. C’est un véritable jeu d’enfant de bâtir quelque chose qui fonctionne bien avec ces outils, ce qui explique leurs rapides adoptions aux non-développeurs. En revanche, j’ai vite été frustré par ces outils. Ils sont certes ultra efficaces mais également très limités. Quelqu’un qui n’est pas développeur ne s’en rend pas forcément compte et se contente de ce qu’offrent les services. Mais pour un dev, c’est un peu comme être à l’étroit dans ces chaussures, on lâche vite l’affaire.</p>
<p>J’ai donc laissé tomber ces outils pour repartir sur du code. Très clairement, le No Code ne m’a pas permis d’être plus rapide qu’en codant. Je dirai que je suis allé plus vite sur le 10 premiers pourcents de mon projet avant de devoir batailler avec les différents outils et leur capacité d’intégration. Chose qui n’arrive pas quand on développe soit même. Les offres gratuites sont très limitantes, autant dire que ça permet de voir un peu ce que ça donne, mais il faudra rapidement passer sur une offre payante pour tirer parti de l’outil, ce sera même indispensable pour lancer un produit. Ce aussi quelque chose qui n’existe pas en codant. Je n’ai jamais eu à payer quoique se soit pour déployer mes applications en production (si ce n’est un nom de domaine perso, bien sûr) parce que la plupart des fournisseurs proposent une offre gratuite jusqu’à un certain niveau pour une application. Il y a aussi autre chose qui m’a dérangé, c’est de devoir passer par plusieurs outils avec chacun leurs règles et leurs tarifs pour pouvoir réaliser mon projet. Cela cumule les coûts et les aller/retour d’une plateforme à l’autre.</p>
<p>Mon retour est que ces outils n’apportent pas grand-chose si ce n’est rien pour un développeur qui a la compétence de faire from scratch. Ils sont également très chers. Franchement, les tarifs sont vraiment élevés par rapport à un hébergement d’application, donc encore une fois un dev trouvera mieux ailleurs. En revanche pour quelqu’un qui n’est pas développeur ce n’est pas la même histoire.</p>
<h2 id="pour-un-non-dev">Pour un non dev</h2>
<p>Quand on a pas la capacité de développer soit même, ces outils sont juste géniaux et permettent de réaliser à peu prêt tout ce qu’on peut faire sur le web. On peut faire un site web, une application mobile, des base de données relationnelle ou non, tout un paquet d’automatisations pour faire le lien entre les différents outils. Cela ouvre des perspectives incroyable pour quelqu’un qui veut lancer son idée ou pour les entreprises qui veulent automatiser certain process sans passer par la case dev. C’est pour cela que le coût de ses plateformes est élevé. C’est parce que la valeur se trouve dans les opportunités qu’elles ouvrent et dans l’optimisation des coût quelles proposent. Même si il faut payer 3 abonnements sur trois outils différents pour son projet on sera toujours très loin du coût du salaire d’un seul développeur même junior. Le prix va cependant vite exploser et les limitations se faire sentir si le service doit être customisé ou répondre à des problématiques de charge particulière. Mais si cela arrive c’est que le produit/service se vends et qu’il est tant d’internalisé le développement.</p>
<p>Quand on n’a pas les compétences pour développer soi-même, ces outils, sont juste géniaux et permettent de réaliser à peu près tout ce qu’on peut faire sur le web. On peut faire un site web, une application mobile, des bases de données relationnelles ou non, tout un paquet d’automatisations pour faire le lien entre les différents outils. Cela ouvre des perspectives incroyables pour quelqu’un qui veut lancer son idée ou pour les entreprises qui veulent automatiser certains process internes sans passer par la case équipe de développement. C’est pour cela que le coût de ces plateformes est élevé. C’est parce que la valeur se trouve dans les opportunités qu’elles ouvrent et dans l’optimisation des coût qu’elles proposent. Même s’il faut payer 3 abonnements sur trois outils différents pour son projet, on sera toujours très loin du coût du salaire d’un seul développeur, même junior. Le prix va cependant vite exploser et les limitations se faire sentir si le service doit être customisé ou répondre à des problématiques de charge particulière. Mais si cela arrive, c’est que le produit/service se vend et il sera encore temps d’internaliser le développement.</p>
<p>Devant ce constat, je vais tenter une nouvelle expérience avec le No Code. Ma première approche a été d’utiliser ses outils pour faire ce que je pouvais faire facilement et avec plaisir moi-même. En revanche, je ne suis pas un grand fan du CSS et le développement front à tendance à vite me saouler. Je pense donc tenter de refaire un front pour une de mes applications en passant par mon API. Je ferai un retour dans un prochain post pour vous raconter tout ça. C’est le seul intérêt pour l’instant que je vois pour moi, me faire gagner du temps sur ce que je n’aime pas trop faire et me permettre de me concentrer sur mes forces.</p>
<h2 id="lavenir-du-no-code">L’avenir du No Code</h2>
<p>Il faut être honnête avec son accessibilité et la puissance qu’offre le No Code aujourd’hui, il va se développer à fond. Toutes les plateformes No Code ouvrent l’accès à la création autour du web à un bien plus large public. Dans le monde actuel cela répond à un enjeu stratégique sur la transition numérique des entreprises. De plus, le No Code en tant que tel n’est pas nouveau. Ce qui a fait exploser les CMS il y a quelques années, c’est justement la possibilité de permettre à des non-techs de maintenir leur site et de gérer leur propre contenu. Ces outils ne sont que l’évolution de ce qui se faisait déjà, mais à une tout autre échelle et en mode SaaS.</p>
<h2 id="danger-ou-opportunité">Danger ou opportunité</h2>
<p>Dans la communauté des développeurs, ce qu’on peut dire, c’est que le No Code n’est pas apprécié. Je trouve qu’il y a une réaction extrême et dédaigneuse de la part de la communauté. C’est vrai que cela ouvre les portes à la création d’application aux personnes qui ne sont pas développeur. Ils peuvent maintenant se passer de nous pour beaucoup de choses. Mais n’est-ce pas là la raison d’être de l’informatique en général. Permettre à de plus en plus de personnes de bénéficier, de maîtriser les nouvelles technologies et de créer par elle-même.</p>
<p>Il y a peut-être une peur de se faire remplacer par n’importe qui sachant utiliser ces outils et de devenir obsolète. À mon sens, ces craintes sont infondées. Premièrement, parce qu’il faut bien coder ces outils. Deuxièmement, parce que le monde de développement ne se limite pas qu’au web, il y a beaucoup d’opportunités dans d’autres domaines. Et enfin parce qu’il y aura toujours besoin d’un développement spécifique et pointu dans certains cas et il faudra des experts pour assurer à ce niveau. Il se peut que dans un avenir proche le No Code deviennent la norme pour une grande partie des applications pour lesquelles il offre une couverture fonctionnelle suffisante, tout comme Wordpress est hyper présent dans l’univers du web.</p>
<p>Il peut être à la fois une menace pour tout un pan de la profession. Je pense aux développeurs juniors qui auront moins d’opportunités puisque les missions qu’on leur conférait seront remplacées par ses outils. Je pense aux développeurs qui n’ont pas suffisamment développé leurs compétences. Ils ne pourront pour aller travailler sur des projets qui ne sont pas adaptés au No Code et seront remplacés.</p>
<p>Il peut également être une opportunité. En effet tout le monde ne pas se mettre à faire du No Code et il faudra des spécialistes dans ce domaine pour prendre en main les intégrations. Ce seront sûrement les nouveaux métiers de demain (nocoder ou maker 🤔). Les développeurs pourront facilement embrasser ce changement avec en plus la vision d’un dev et la connaissance des technos sous-jacente (beaucoup d’outils No Code permettent de coder pour la customisation). </p>
<p>Je peux me tromper, bien évidemment, mais le monde du développement web et peut-être en train de vivre ce que beaucoup de secteurs ont vécu avec l’arrivé de l’informatique. C’est-à-dire moins de personne pour réaliser une tâche et surtout un niveau d’abstraction qui monte, permettant de réaliser des tâches complexes avec moins de connaissance technique.</p>
<h2 id="evolution-du-métier-de-développeur">Evolution du métier de développeur</h2>
<p>Au final, ne peut-on pas voir le No Code comme une évolution de notre métier ? Un nouveau niveau d’abstraction dans le monde de la programmation. Si on y regarde de plus prés l’intégration des différents outils via des API, le fait de réaliser une application front, de gérer sa DB et mettre en place ses règles métiers pour l’automatisation est assez proche de ce que l’on fait en développant. Il faut simplement beaucoup moins de connaissance technique pour y parvenir.</p>
<p>Si on réfléchi, c’est un peu la même chose qu’avec les évolutions des langages eux même. En regardant un développeur web aujourd’hui, ce souci t-il de l’occupation mémoire des données qu’il manipule. Est-ce qu’il doit explicitement libérer cette même mémoire lorsqu’il ne l’utilise plus ? Les dernières générations de langage de programmation ont également abstrait bon nombre de concept de base. Au point que beaucoup de développeurs n’ont même pas besoin de comprendre comment fonctionne un ordinateur pour le programmer. C’était impensable pour pouvoir développer dans les premières générations de langage.</p>
<p>Au final qu’on pensé les développeurs qui codaient en assembleur quand le, C est arrivés ? Et que pensent les développeurs C quand ils voient du JavaScript ? Il est possible de réaliser de programme en JavaScript sans même comprendre le début pourquoi du comment fonctionne un ordinateur et un système d’exploitation. Est-ce que cela fait des développeurs JS de mauvais développeurs ?</p>
<p>Bien que le niveau d’abstraction des langages ait augmenté avec le temps, le C et l’assembleur n’ont pas disparu. Ils sont la base de beaucoup de choses dans l’informatique d’aujourd’hui. Ils sont devenus des langages ultra spécifiques à des domaines précis où aucun autre ne peut prétendre répondre mieux au besoin. Ils sont les outils de développeurs qui ont acquis une expertise pointue dans les domaines qui les nécessite.</p>
<p>Pour conclure, si on repense à l’introduction de Robert C.Martin dans Clean Code, on trouve justement un chapitre qui parle de la montée en niveau d’abstraction de nos langages de programmation. L’objectif étant de permettre à de plus en plus de monde de se servir de l’outil informatique en exploitant toujours mieux sa puissance. Le No Code est peut-être, tout simplement, ce qui s’approche le plus aujourd’hui du prochain niveau de code.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>ilek</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/ilek/"/>
        <id>https://blog.d2velop.fr/ilek/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/17/ilek.svg" medium="image" />
            <category term="Chroniques"/>

        <updated>2023-05-08T21:01:54+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/17/ilek.svg" alt="Logo ilek" />
                    Après avoir mis en place D2velop, je me trouve un second souffle et ma motivation est au top. Il y a cependant, quelque chose qui me dérangeait quand même chez Solocal. En fait, je prenais énormément de plaisir avec D2velop, mais à l’inverse, je m’ennuyais&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/17/ilek.svg" class="type:primaryImage" alt="Logo ilek" /></p>
                <p>Après avoir mis en place D2velop, je me trouve un second souffle et ma motivation est au top. Il y a cependant, quelque chose qui me dérangeait quand même chez Solocal.</p>
<p>En fait, je prenais énormément de plaisir avec D2velop, mais à l’inverse, je m’ennuyais sérieusement chez Solocal. Je pensais qu’avoir un projet annexe me permettrai de prendre du plaisir et donc de plus facilement me contenter de mon quotidien au travail. C’est l’effet inverse qui s’est produit. Cela m’a fait prendre conscience de ce que je voulais.</p>
<p>Je n’étais quand même pas motivé de repasser par la case entretien et tests techniques. J’avais aussi clairement un doute de trouver mieux ailleurs. Je commençais à me dire qu’au final, c’était partout pareil.</p>
<p>Mais je suis tombé, par hasard sur une offre publiée sur LinkedIn par Shirley (je suis sûr que la plupart d’entre vous la connaisse). J’ai jeté un œil par curiosité (ce que je fais souvent par ailleurs) et j’avoue que sa description m’a tapé dans l’œil. Ça faisait longtemps que j’étais dans le doute, mais là, j’étais clairement sûr qu’il fallait que je postule.</p>
<h2 id="annonce">Annonce</h2>
<p>L’annonce était géniale et elle respirait la sincérité. Je dis ça parce qu’elle ne survendait pas tous les aspects positifs de l’entreprise à coup de mots-clés racoleurs. Elle n’éludait pas non plus les aspects négatifs ou les manques de l’organisation actuelle. Cette sincérité donne de la crédibilité à la description, on a la sensation d’être en face d’un quelque chose de réel et non d’une insupportable publicité.</p>
<p>Je décide donc de répondre à l’annonce. Ici pas besoin d’envoyer un CV, mais de remplir un formulaire tout simple avec ses coordonnées et un champ libre. Je me suis donc laisser aller sur ce que m’inspirai l’annonce et sur ce que je désirai dans mon job.</p>
<p>J’ai été recontacté rapidement et mon message avait fortement intéressé la recruteuse. J’ai échangé avec elle, sur la culture de l’entreprise, les attentes dans l’équipe tech et le fonctionnement en général. J’ai été envoyé vers le CTO du moment pour un échange plus poussé niveau culture technique.</p>
<h2 id="craftmanship">Craftmanship</h2>
<p>Le software craftmanship, cet état d’esprit que je n’avais jamais encore côtoyé dans mes expériences professionnelles, venait de me sauter aux yeux après un simple coup de téléphone. J’étais clairement sur la même longueur d’onde que le CTO d’ilek et je sentais qu’il proposait un cadre de travail idéal pour faire quelque chose qui a du sens tout en offrant un environnement où je pouvais énormément progresser.</p>
<p>J’ai donc continué le processus de recrutement avec un test technique basé sur l’étude d’une partie du code legacy de l’application et un kata à faire un pair programming avec un lead dev. Tout s’est super bien passé, je me souviens qu’on a pas fait grand-chose sur le kata tant on a échangé sur plein d’aspects techniques.</p>
<p>Après une autre visio avec des membres de l’équipe pour le fit perso et un point avec le CEO d’ilek me voici avec une promesse d’embauche. Autant vous dire qu’il n’a pas été difficile de choisir entre la morosité de mon quotidien chez Solocal et la proposition d’ilek qui était plus intéressante sur tous les points.</p>
<p>En vrai, les rencontres avec le CTO et le lead dev ont autant comptées dans mon choix de rejoindre ilek que l’entreprise et le projet en lui-même.</p>
<h2 id="les-débuts">Les débuts</h2>
<p>Ce n’est pas si vieux que ça. Je suis arrivé le 4 janvier 2021. Je commence par une semaine de formation sur l’entreprise. On m’apprend quel est le rôle d’un fournisseur d’énergie, les valeurs d’ilek, les différents métiers. (les opérateurs, le marketing, la team énergie et la team tech).</p>
<p>Cette semaine est suivie d’une semaine d’onboarding tech où je suis en pair avec le lead dev pour le setup de mon environnement de travail et la prise de connaissance des outils et process de l’équipe tech.</p>
<p>Je suis ensuite intégré à une des équipes pour rentrer dans le vif du sujet.</p>
<h2 id="team-activation">Team activation</h2>
<p>Le produit est découpé en trois cycles de vie par rapport à nos clients. Il y a une équipe pour chaque cycle de vie. J’ai rejoint l’équipe activation qui se charge d’activer les contrats des clients et de la liaison avec les gestionnaires de réseau (Enedis et GRDF).</p>
<p>Franchement, j’ai adoré l’organisation de l’équipe qui est libre et efficace sur son sujet. Pas de Scrum ou autre méthodologie particulière, juste un pilotage par le terrain et une livraison en continue. Ce qu’il y a de bien, c’est que les équipes sont constituées de toutes les compétences nécessaires à la réalisation. Il y a des devs, des POs et des opérateurs (clients du Back office de l’application).</p>
<p>Dans cette équipe, on travaille principalement sur le back-office et sur l’espace client. On touche donc à du Ruby On Rails (RoR) en back et à du React en front (espace client). Je n’avais eu qu’une seule expérience sur du RoR chez Leadformance lorsque je suis entré au support. J’avoue que ça n’avait pas été extraordinaire et que je n’en garde pas un bon souvenir. Ici, c’est différent, j’apprécie plus le langage et le framework. Il n’est pas parfait (non typé par exemple) mais je me sens à l’aise avec aujourd’hui.</p>
<p>Il y a pas mal de code legacy dans le périmètre de cette équipe. Un gros travail de refactoring avait déjà été fait avec que j’arrive et emboîter le pas n’a pas été très difficile.</p>
<p>En vrai, j’étais content de mon choix. L’équipe était au top et on avait plein d’ambition concernant la suite pour le produit. J’avais eu la confirmation sur les premiers mois qu’on partageait bien les mêmes valeurs du travail de qualité, de bienveillance et d’amélioration continue.</p>
<p>J’avais le sentiment d’être enfin bien à ma place, je pouvais m’investir sur mes projets, sans me fatiguer inutilement et ça m’a permis de me ressourcer.</p>
<h2 id="retournement-de-situation">Retournement de situation</h2>
<p>Cela a duré environ 5 mois. Comme je suis abonné aux revirements côté pro, je ne pouvais pas y couper ici non plus 😕. Lors d’une réunion hebdomadaire, on apprend que notre CTO a démissionné. Il a ses raisons, mais j’avoue que ça a été un choc. Toutes mes certitudes venaient de voler en éclats. Les départs, je connais ça et je sais que lorsqu’une personne qui a de l’influence part, elle ne part jamais seule. Elle ouvre une brèche et entraîne dans son sillage d’autres personnes.</p>
<p>Cela n’a pas manqué, deux démissions ont suivi rapidement, puis trois autres encore un peu plus tard. Résultat, 6 départs en 4 mois, 50 % des développeurs. Devant cette débâcle et le manque de réaction de l’entreprise, j’ai eu l’impression qu’on nous oubliait un peu. ilek cherchait son nouveau CTO avant de compenser les départs pour que ce soit lui qui prenne en charge la constitution de son équipe.</p>
<p>Ça a été un moment qui m’a paru interminable, avec énormément de doute dans l’équipe. Je crois qu’il n’y a rien de pire qu’une situation qui reste dans flou. C’est devastateur pour la motivation.</p>
<h2 id="le-doute-le-retour">Le doute (le retour)</h2>
<p>J’ai l’impression de le mettre souvent ce titre 😅. Mais clairement, ici, c’est une belle chute. J’étais tellement au top depuis mon intégration que là, c’est la douche froide. Pourtant même après le départ de notre CTO, sans chef à notre bord, il n’y a pas grand-chose qui a changé. Nous étions toujours capables de livrer nos projets et d’avancer sur les changements techniques amorcés. Les membres de l’équipe tech restaient soudés malgré la situation.</p>
<p>Il y a encore 2 mois, j’ai hésité à partir aussi. J’ai même lancé les démarches dans l’entreprise où sont partis 5 des devs qui nous ont quittés (il faut dire qu’elle a de sérieux arguments pour convaincre). Mais je me sentais mal à l’aise avec ça. Déjà, parce que je n’avais rien à reprocher à ilek. Les promesses que j’avais eues à l’embauche étaient tenues et je me sentais bien. Deuxièmement, je n’étais pas à l’aise avec l’idée de partir alors que j’étais là depuis quelques mois seulement. Ça peut paraître idiot, mais j’avais l’impression de laisser tomber l’équipe dans un moment difficile pour une ambition personnelle et ça n’est pas en adéquation avec mes valeurs.</p>
<p>Autre élément très important, l’arrivé dans quelques mois de mon fils allait coïncider avec la fin de mon préavis. Je ne me voyais pas commencer dans une nouvelle entreprise par un congé de paternité. Je ne voulais pas non plus cumuler les changements. Ma famille est ma priorité dans la vie et devenir père va avoir un impact important sur mon quotidien. Je sais qu’ilek garantie un bon rapport vie pro/vie perso ce qui n’aurait pas été le cas si j’étais parti. Rien que le fait de devoir s’acclimater à une nouvelle structure, de nouveaux langages, de nouveaux process et de nouvelles problématiques métier demandent un investissement lourd. Si on ajoute à ça la découverte de la parentalité et la gestion d’un nouveau-né en télétravail, il y a un gros risque de gâcher de bons moments par la fatigue ou une gestion complexe du quotidien.</p>
<p>J’ai donc décidé de retirer ma candidature. Tant pis si c’est une superbe opportunité dans le monde la tech. Aujourd’hui, je me sens bien avec cette décision et je suis pleinement investi en tant que futur papa et lead dev chez ilek.</p>
<h2 id="la-reconstruction">La reconstruction</h2>
<p>Une fois notre nouveau CTO en place et opérationnel, c’est donc un projet de reconstruction de l’équipe qui s’amorce. On met les départs derrière nous pour nous concentrer sur l’année qui arrive (2022). On passe donc par une phase de recrutement (7 postes à pourvoir). Je m’investis pas mal sur cet aspect. J’adore faire les entretiens techniques et échanger avec des recrues potentielles. Le marché regorge de profils juniors, mais c’est beaucoup plus compliqué de trouvé des dev expérimentés. J’entends par là, qui ont un réel savoir-faire (les années ça ne veut pas dire grand-chose). Je passe le mot sur différents réseaux dans l’espoir de convaincre de bons profils de nous rejoindre. Pour l’instant rien de conclu, mais on a quelques bons candidats/es qui ont émergé.</p>
<p>Le deuxième point de la reconstruction, c’est la définition claire de nos guidelines. On part sur la documentation de nos manières de travailler et sur la documentation de nos choix techniques. Le but étant de mettre tout le monde d’accord sur les choix passés et en cours et de faciliter l’onboarding des nouveaux.</p>
<p>Je prends une place plus importante dans cette nouvelle organisation. Les devs qui sont partis étaient des leaders et cela a laissé un grand vide. Notre nouveau CTO s’appuie sur les membres les plus expérimentés pour prendre en main les sujets qu’on souhaite faire avancer et pour transmettre les connaissances dans l’équipe.</p>
<p>Ça me plaît de participer activement au recrutement, d’échanger sur les choix d’architecture et d’avoir des responsabilités qui vont au-delà du code. J’ai le sentiment qu’il y a de quoi s’épanouir si on arrive à s’affranchir du legacy du produit.</p>
<h2 id="fin-dannée">Fin d’année</h2>
<p>On approche de la fin d’année. Une année qui a été super riche, beaucoup de nouvelles rencontres, de choses apprises, de technos découvertes et d’émotions vécues. Tous les efforts sont tournés vers une clôture de 2021 qui nous met sur les bons rails pour lancer une année 2022 très prometteuse.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>D2velop</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/d2velop/"/>
        <id>https://blog.d2velop.fr/d2velop/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/16/favicon.ico" medium="image" />
            <category term="Chroniques"/>

        <updated>2023-05-08T19:08:53+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/16/favicon.ico" alt="Favicon de D2velop" />
                    D2velop, c’est un projet que j’ai créé à la base pour pouvoir me ressourcer. Le but premier était de redonner du sens à ce que je faisais au quotidien et pouvoir me sentir utile. Cela faisait un moment que je suivais l’évolution du marché du&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/16/favicon.ico" class="type:primaryImage" alt="Favicon de D2velop" /></p>
                <p>D2velop, c’est un projet que j’ai créé à la base pour pouvoir me ressourcer. Le but premier était de redonner du sens à ce que je faisais au quotidien et pouvoir me sentir utile.</p>
<h2 id="le-marché-du-recrutement-tech">Le marché du recrutement tech</h2>
<p>Cela faisait un moment que je suivais l’évolution du marché du recrutement dans la tech. À la fois pour pouvoir me situer sur ce marché, mais également parce que je voyais de plus en plus de profils issus d’une reconversion.</p>
<p>Le constat auquel je suis arrivé était assez triste cependant. En décalage complet avec la réalité, on promet monts et merveilles à des juniors qui utilisent leur CPF ou dépensent des sommes assez élevées pour, en retour, une difficulté incroyable à s’insérer sur le marché du travail.</p>
<figure class="content_img">
    <img loading="lazy"  src="https://media.giphy.com/media/gLp8NXBF32DNYWTa73/giphy.gif" alt="c'est pas bien"  data-is-external-image="true">
    <figcaption>C'est clairement pas honnête</figcaption>
</figure>

<p>En effet, on entend qu’il y a une énorme pénurie de développeurs et qu’il est difficile de recruter. Alors on s’est mis à former beaucoup plus de monde pour régler le problème et permettre de retrouver un équilibre offre/demande. Seulement la situation est plus complexe que cela. La « pénurie » ne concerne pas l’ensemble de la profession, mais bien certains profils. Tout particulièrement les développeurs expérimentés ainsi que certaines spécialités récentes (data, IA, DevOps, par exemple).</p>
<p>On parle de pénurie, mais une entreprise qui propose une bonne valorisation du métier de développeur avec la rémunération, la reconnaissance et l’autonomie qui va avec n’a aucun mal à recruter des développeurs expérimentés et compétents (attention, il n’y a pas forcément de lien entre les deux 😱). En revanche avec un salaire dans le bas du tableau, une mission qui manque de sens et aucune valorisation du travail de développeur, il ne faut pas s’étonner de ne pas trouver de profils. Ce n’est pas qu’il n’y en a pas. C’est juste qu’ils ne veulent pas venir chez ces entreprises 😖. Il y a aussi le problème de la marque employeur, certaines entreprises n’ont pas encore conscience qu’elles sont blacklistés par une immense partie des devs ou qu’elles sont le symbole de tout ce qu’on ne veut pas connaître. C’est donc encore plus difficile pour elles de trouver de bons profils. Dans un article précédent, je parlais de mon passage en ESN. Aujourd’hui, ces entreprises sont celles qui sont le plus confronté à cette problématique. Pourtant, elles représentent une grande partie de la demande.</p>
<p>Il n’y a en fait pas de problème pour le recrutement de nouveaux développeurs juniors. Entre les universités, les écoles d’ingénieurs, les écoles privées, on a déjà de nouveaux profils qui arrivent régulièrement sur le marché et qui doivent trouver une place. Maintenant, il faut ajouter toutes les formations en ligne et les bootcamps. Ces nouveaux profils se retrouvent en concurrence directe avec des personnes qui ont entre 2 ans et 5 ans de formations et un diplôme/certificat qui a moins de crédibilité sur le marché. C’est une des raisons qui compliquent leur accès à l’emploi 😓. On entend souvent qu’il faut laisser leur chance aux juniors, mais dans la réalité, c’est bien le cas. Il y a énormément d’embauches de junior dans les faits. Cependant, il faut bien avoir conscience qu’il y a différents niveaux de compétences. On retrouve malheureusement beaucoup de profils similaires et avec peu de compétences autres que de savoir utiliser un langage. Le problème étant qu’il faut bien plus que ça pour être un développeur.</p>
<h2 id="les-attentes-en-entreprise">Les attentes en entreprise</h2>
<p>J’ai eu la chance de faire un grand nombre d’entretiens d’embauche pour les entreprises où j’ai travaillé. J’ai également eu à encadrer des stagiaires, alternants et à faire l’onboarding de nouvelles recrues.</p>
<p>Mon constat, c’est que la plupart des bootcamp et formations en ligne ne donnent pas un niveau en sortie suffisant pour être réellement employable 😣. Pour avoir vu plein de personnes sortir de ces dernières, il y a clairement un manque énorme dans les compétences de bases. Ces formations sont bien souvent trop superficielles, elles se concentrent sur la partie outils du métier (les langages, Framework) et sur les effets “waouh” (de belles interfaces web ou mobile). Le problème ici, c’est que ce sont des compétences volatiles et qui n’ont que peu de valeur. Un développeur aguerri avec les bonnes pratiques et la maîtrise des fondamentaux n’a aucun problème pour changer de langage ou Framework. D’autre part, on a une génération de juniors qui se contente d’avoir une application qui « marche ». Je vais peut-être choquer un peu ici, mais ce n’est en aucun cas quelque chose d’extraordinaire 😒. À la fois, c’est normal de faire quelque chose qui fonctionne, et dans la majorité des cas (application web ou mobile) c’est à la portée de n’importe qui 🤫.</p>
<p>Une entreprise qui vend un produit ou s’appuie sur une solution pour délivrer sa valeur ne se contente pas d’une solution qui fonctionne à un instant t. Il faut que cette dernière garantisse son résultat, qu’elle soit évolutive et maintenable sur plusieurs années. En bref, on attend du professionnalisme. Et cela demande d’acquérir des pratiques, d’avoir des connaissances théoriques de bases au minimum et de réellement maîtriser les paradigmes qui sont derrière les outils.</p>
<p>Cela ne veut pas dire que ces formations sont à éviter 😮. Juste qu’elles ne sont pas réellement honnêtes concernant leur promesse (merci le marketing). Elles permettent de se mettre le pied à l’étrier, d’avoir un cadre pour apprendre et un suivi. Elles permettent aussi d’obtenir un titre reconnu par l’état. Il faut juste avoir conscience que ce n’est pas suffisant. Et que s’insérer sur le marché du travail demandera un investissement bien plus important que ces formations pour compenser les manques.</p>
<p>J’ai eu l’occasion de rencontrer différents styles de personnes qui avaient suivi des bootcamps. Celles qui se contentent de la formation et celles qui s’investissent au-delà. Il n’y a pas photo. Celles qui sont allées chercher plus loin, qui ont réalisé des projets (je parle de vrais projets, pas un tuto) qui mettent en avant des pratiques reconnues et qui se sont investie dans des réseaux avec des développeurs plus expérimentés savent convaincre et trouve un emploi. Les autres envoient des CV ou ne sont pas conservés après la période d’essai, car elles ont du mal à franchir le mur de la réalité du métier.</p>
<p>Il y a également un autre paramètre à prendre en compte actuellement. L’essor du no-code. En effet, ces outils offrent la possibilité aux personnes qui ne savent pas coder de réaliser des sites, application mobile et toute sorte d’automatisations. Cela impacte également la demande de profils junior, car les startups et beaucoup de projets internes aux entreprises sont maintenant réalisés avec ces outils. Ce sont autant d’opportunités en moins pour les personnes en recherche.</p>
<h2 id="lapport-de-d2velop">L’apport de D2velop</h2>
<p>Mon objectif était d’apporter mon aide afin de combler le manque de compétences au travers d’un mentorat pour développeurs juniors. Transmettre et aider des gens à s’accomplir dans le métier de développeur, c’est clairement ce qui fait sens au travers de D2velop. Je me suis pas mal cherché concernant l’offre à proposer. Passant d’une formation payante en bêta à un Dojo ouvert tout récemment.</p>
<p>Je me suis beaucoup investi au début avec pas mal d’espoir, je dois dire. Je n’ai pas réussi à faire ce que j’avais en tête et finalement avec un boulot à plein temps, j’ai failli me cramer. Je me suis épuisé et j’ai pensé à tout arrêter. J’ai donc pris une pause et du temps pour réfléchir à ce que je voulais faire avec D2velop et à ce qui me motivait.</p>
<p>J’ai créé un blog qui me permet d’écrire et de partager ma vision et mon expérience. D2velop est maitenant un Dojo dédié aux développeurs juniors. Il a pour but de transmettre les compétences profondes qui sont nécessaires pour être un bon dev. Dans ce dojo, il y a des échanges pour les connaissances théoriques et des sessions en live pour la pratique.</p>
<p>Je propose également d’aider les développeurs juniors qui doivent passer des entretiens techniques. Avec mon expérience, que ce soit d’un côté ou de l’autre, j’apporte des conseils pour bien préparer cette étape d’un processus de recrutement. J’aide les juniors à mettre en valeur leurs forces et à être à l’aise avec leurs faiblesses.</p>
<h2 id="ce-nest-que-le-début">Ce n’est que le début</h2>
<p>J’ai encore plein d’idées pour faire évoluer D2velop, mais pour l’instant l’objectif est de réaliser des sessions live régulièrement. En sachant que je suis toujours sur un job à temps plein à côté, je compte y aller plus progressivement pour ne pas m’épuiser au bout de quelques semaines 😁.</p>
<figure class="content_img">
    <img loading="lazy"  src="https://media.giphy.com/media/l0DAG3B1k4I6p3pg4/giphy.gif" alt="nouveau lancement"  data-is-external-image="true">
</figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Solocal</title>
        <author>
            <name>Cédric Gérard</name>
        </author>
        <link href="https://blog.d2velop.fr/solocal/"/>
        <id>https://blog.d2velop.fr/solocal/</id>
        <media:content url="https://blog.d2velop.fr/media/posts/15/logo_solocal.png" medium="image" />
            <category term="Chroniques"/>

        <updated>2023-05-08T18:32:13+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.d2velop.fr/media/posts/15/logo_solocal.png" alt="Logo de Solocal" />
                    Alors voilà, c’est le moment où le groupe Solocal décide de revoir sa stratégie et d’intégrer plus activement ses différentes filiales. C’est le fameux passage en mode groupe. Depuis le début que j’étais chez Leadformance, que ce soit en presta ou en interne, il y&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://blog.d2velop.fr/media/posts/15/logo_solocal.png" class="type:primaryImage" alt="Logo de Solocal" /></p>
                <p>Alors voilà, c’est le moment où le groupe Solocal décide de revoir sa stratégie et d’intégrer plus activement ses différentes filiales. C’est le fameux passage en mode groupe.</p>
<p>Depuis le début que j’étais chez Leadformance, que ce soit en presta ou en interne, il y avait le groupe qui gravitait autour de la startup, mais sans aucune interférence perceptible sur le terrain.</p>
<h2 id="le-changement-cest-maintenant">Le changement c’est maintenant</h2>
<p>Un jour, on apprend que le fondateur quitte le navire pour se lancer dans une autre aventure. Ça a mis un coup à la boite que je n’avais pas prévu. Il avait une sorte d’aura et un charisme qui permettait de facilement fédérer tout le monde. Il avait un enthousiasme naturel et communicatif qui faisait du bien.</p>
<p>S’ensuivi plusieurs changements dans la gouvernance avec la reprise des fonctions de présidence par des membres de Solocal à Paris. Autant vous dire que niveau proximité, on n’était pas au top.</p>
<p>Dans une logique de contrôle des coûts, le groupe a éliminé toutes les fonctions support jugées redondantes par rapport à celles déjà existantes à Paris. Au revoir donc la gestion financière et les ressources humaines à Chambéry. Bonjour les contacts par mail ou via des outils impersonnel pour échanger. Je suis mauvaise langue, notre nouvelle RH venait de temps en temps sur notre site pour que l’équipe puisse échanger de vive voix. En revanche, on a changé plusieurs fois de RH puisqu’elles ont démissionnées en série. De là à dire qu’il y avait un problème de management 😔</p>
<h2 id="laccélération">L’accélération</h2>
<p>Nous sommes restés comme cela un moment. Ensuite, les changements ont repris avec les changements gouvernances. Les conseillers clients ont été rattachés à une direction parisienne liée à la gestion des portefeuilles clients, l’IT à la DSI, et les devs à la direction technique du groupe. Pendant des semaines, les annonces de nouvelles nominations de managers se sont succédées avec des responsabilités toutes plus incompréhensibles les unes que les autres. Tout cela sans qu’aucun changement ne soit perceptible dans notre quotidien.</p>
<p>Enfin si, le changement était une perte de communication horizontale. C’était un peu comme si les gens qui étaient sur la table d’à côté dans l’open-space ne faisaient plus partie de la même entité alors qu’on bossait sur le même produit.</p>
<p>Adieu l’agilité. Enfin ailleurs que dans la communication. Car chaque présentation présentait l’entreprise comme une structure agile, mais ce n’était clairement pas le cas. Mais il semble que pour beaucoup de personnes qui n’ont pas l’état d’esprit agile, l’agilité se résume à faire de standup quotidien et des sprints.</p>
<p>En revanche, on bossait quand même avec des cycles de mise en production à plusieurs mois. Dans lesquels toutes les filiales impliquées sur un projet finissent quelques semaines avant la deadline par balancer leur développement sur un environnement de QA. Là, des personnes dont tu n’as jamais entendu parler jouent des scénarios pour tester la solution complète. Bien évidemment, on ayant bossé sans réelle collaboration avec les autres équipes, rien ne fonctionne. Surtout avec les deadlines qui sont décidées avant même de savoir réellement ce qui doit être fait. Il y a donc les équipes qui ne livrent qu’une partie de ce qui est attendu, tant pis pour ceux qui en avait besoin et celles qui ont rusher à la fin et livrent des services qui plantent à la première requête en préprod.</p>
<p>Il faut donc des semaines de correctif pour aboutir à une solution « viable ». C’est paradoxal, le passage sur l’environnement QA est peut-être le seul moment où l’on s’approche de l’agilité. C’est ici que tu as du feedback produit rapide après chaque déploiement et que tu peux faire un pas en avant avec un peu plus de certitude sur l’objectif à chaque itération.</p>
<p>Au final avec quelques semaines/mois de retard, la solution passe en production. Côté technique tout le monde est frustré et fatigué, mais au final, il y a plein de responsables qui s’auto-congratulent dans les présentations lors du lancement. Le lancement du produit, c’est le jour où tu sais que tu vas passer ton temps sur l’outil de ticketing pour la gestion des bugs.</p>
<h2 id="lourdeur">Lourdeur</h2>
<p>Entrer dans un groupe de plusieurs milliers de personnes, c’est entrer dans une structure qui gère « en masse ». Autrement dit la petite startup de 60 personnes à 600 bornes de là ne pèse plus rien dans la balance et les prises de décisions.</p>
<p>On passe donc dans une vision très centralisée. La tête décide et planifie et les organes périphériques exécutent le plan. Parfois sans vraiment comprendre le pourquoi du comment. Chaque décision est longue à être prise parce qu’elle implique beaucoup de personnes. Il y a donc des réunions et encore des réunions avant de pouvoir agir. Cela donne l’impression de devoir faire chaque pas avec des chaînes aux pieds.</p>
<p>Un des points les plus difficiles à vivre, c’est la perte de maîtrise sur les aspects métier. Les filiales devenant des exécutants d’une stratégie globale, il se crée un fossé entre la vision terrain et les actions mises en place.</p>
<h2 id="la-politique">La politique</h2>
<p>L’aspect le plus agaçant pour moi, dans les structures de cette taille, est que tout est ultra politisé. Chaque discours ou présentation donne l’impression d’entendre un candidat à une élection en pleine compagne. On a des grandes présentations qui dure des heures pour au final ne pas dire grand-chose. Il y a également les gens qui vont dans les filiales un peu comme un politicien qui va rencontrer le peuple en province. C’est assez insupportable.</p>
<p>Comme pour la politique, on sent un décalage énorme entre le vécu des employés et le discours du top management. Cela concourt aussi à la fatigue morale avec un sentiment d’incompréhension et l’idée qu’on ne compte pas vraiment pour l’entreprise.</p>
<h2 id="la-carrière">La carrière</h2>
<p>C’est l’autre élément qui créer un biais catastrophique dans les groupes. Chaque personne qui a un peu de responsabilité dans ces structures tant à en avoir plus par l’intermédiaire d’une promotion et d’un changement de poste. Le résultat c’est que chaque personne pense autant à sa propre carrière qu’a l’intérêt du produit. Le biais ici conduit à des prises de décision qui sont conditionnées par les opportunités de carrière. En gros, si pour un avancement une prise de risque ne semble pas indiquée, alors le manager va freiner toutes les initiatives  des quatre fers pour ne pas avoir à assumer un echec. A l’inverse, si la seule solution pour se faire voir c’est un coup d’éclat. Alors le manager peut avoir tendance à pousser les équipes plus que de raison. Cela peut amener à prendre des risques non calculés, juste dans une perspective de carrière.</p>
<p>Dans les deux cas, ce sont les « exécutants » qui en pâtissent. Les managers ne tenant plus leur rôle auprès de leur équipe, car il joue à un autre jeu. Ces deux situations conduisent également à de la frustration, de la fatigue et des tensions.</p>
<h2 id="tension-interne">Tension interne</h2>
<p>C’est ce que j’ai vécu à Leadformance by Solocal. Les projets qui se marchent les uns sur les autres, les frustrations accumulées, le non-sens de projets en cours, l’incompréhension de la stratégie et le discours en bois des managers ont fini par créer des tensions au sein même de LF.</p>
<p>Il y a eu une grosse perte de confiance d’une partie de l’équipe, des conflits entre les développeurs qui ont mené à des prises de bec qu’on ne devrait pas voir dans un cadre professionnel. LF s’est trouvé coupé en deux camps avec des difficultés qui se sont ressenties dans notre travail.</p>
<h2 id="les-règles-du-jeu">Les règles du jeu</h2>
<p>Annoncé comme ça, on se dit que bosser dans une boîte de ce genre est absolument à éviter. En fait, ce n’est pas forcément le cas. Tout comme pour les ESN, il faut comprendre les règles du jeu. Une fois ça en tête, on peut s’intéresser à ce qui a de la valeur pour nous et ne pas se laisser atteindre par ce qui n’en a pas.</p>
<p>Ces structures ont généralement des moyens et proposent des problématiques techniques souvent très intéressantes. La lourdeur peut être aussi un moyen à exploiter pour travailler sur la qualité par exemple. Il y a beaucoup d’inertie et souvent du temps entre les projets par exemple.</p>
<p>Les groupes offrent aussi d’autres avantages comme une forme de sécurité sur l’avenir. Si on connaît le fonctionnement, on peut facilement ne pas subir la pression. Il y également les avantages financiers qu’on peut obtenir, primes, CE, plan de retraite et autre intéressement.</p>
<p>En revanche, il ne faut pas tomber dans l’ennui et être capable de conserver son employabilité par rapport à un marché qui peut évoluer plus vite que l’entreprise. Il ne faut pas avoir peur de n’être qu’un petit maillon de la chaîne en restant à des postes techniques.</p>
<h2 id="pas-pour-moi">Pas pour moi</h2>
<p>Je n’ai pas trouvé ma place dans cette nouvelle organisation, les frustrations et la fatigue accumulés dans la transformation on eu raison de ma motivation.</p>
<p>Mais je n’étais pas dans l’idée de partir, je n’avais pas la force de passer des entretiens et des tests techniques. Alors j’ai décidé de retrouver l’envie par un projet personnel. C’est comme ça qu’est né D2velop.</p>

            ]]>
        </content>
    </entry>
</feed>
