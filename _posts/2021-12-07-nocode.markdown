---
layout: post
title:  No Code
date:   2021-12-07 09:00:00 +0200
categories: technologie
author: CÃ©dric GÃ©rard
image: /assets/posts/nocode/nocode.png
tags: nocode
---

Cela fait un moment quâ€™on entend parler de No Code, câ€™est aujourdâ€™hui devenu un buzzword de plus, mais qui cache pourtant un vÃ©ritable phÃ©nomÃ¨ne dans le monde de la tech.

En tant que dÃ©veloppeur, jâ€™ai dâ€™abord regardÃ© le NoCode avec dÃ©dains. Faisant le parallÃ¨le avec de vieux outils (bonjour dreamweaver) qui nâ€™ont jamais vraiment percÃ©. Puis jâ€™ai essayÃ© dâ€™utiliser certains de ces outils pour voir ce quâ€™on pouvait faire avec et si câ€™Ã©tait vraiment une rÃ©volution.

## Retour d'expÃ©rience d'un dev

Jâ€™ai tout dâ€™abord tentÃ© de faire avec du No Code ce que je pouvais faire en codant. Je suis plutÃ´t dev back et donc je me suis amusÃ© Ã  automatiser certaines taches avec du Zappier et stocker des donnÃ©es avec Airtable. Câ€™est clairement ultra facile Ã  prendre en main. Câ€™est un vÃ©ritable jeu dâ€™enfant de bÃ¢tir quelque chose qui fonctionne bien avec ces outils, ce qui explique leurs rapides adoptions aux non-dÃ©veloppeurs. En revanche, jâ€™ai vite Ã©tÃ© frustrÃ© par ces outils. Ils sont certes ultra efficaces mais Ã©galement trÃ¨s limitÃ©s. Quelquâ€™un qui nâ€™est pas dÃ©veloppeur ne sâ€™en rend pas forcÃ©ment compte et se contente de ce quâ€™offrent les services. Mais pour un dev, câ€™est un peu comme Ãªtre Ã  lâ€™Ã©troit dans ces chaussures, on lÃ¢che vite lâ€™affaire.

Jâ€™ai donc laissÃ© tomber ces outils pour repartir sur du code. TrÃ¨s clairement, le No Code ne mâ€™a pas permis dâ€™Ãªtre plus rapide quâ€™en codant. Je dirai que je suis allÃ© plus vite sur le 10 premiers pourcents de mon projet avant de devoir batailler avec les diffÃ©rents outils et leur capacitÃ© dâ€™intÃ©gration. Chose qui nâ€™arrive pas quand on dÃ©veloppe soit mÃªme. Les offres gratuites sont trÃ¨s limitantes, autant dire que Ã§a permet de voir un peu ce que Ã§a donne, mais il faudra rapidement passer sur une offre payante pour tirer parti de lâ€™outil, ce sera mÃªme indispensable pour lancer un produit. Ce aussi quelque chose qui nâ€™existe pas en codant. Je nâ€™ai jamais eu Ã  payer quoique se soit pour dÃ©ployer mes applications en production (si ce nâ€™est un nom de domaine perso, bien sÃ»r) parce que la plupart des fournisseurs proposent une offre gratuite jusquâ€™Ã  un certain niveau pour une application. Il y a aussi autre chose qui mâ€™a dÃ©rangÃ©, câ€™est de devoir passer par plusieurs outils avec chacun leurs rÃ¨gles et leurs tarifs pour pouvoir rÃ©aliser mon projet. Cela cumule les coÃ»ts et les aller/retour dâ€™une plateforme Ã  lâ€™autre.

Mon retour est que ces outils nâ€™apportent pas grand-chose si ce nâ€™est rien pour un dÃ©veloppeur qui a la compÃ©tence de faire from scratch. Ils sont Ã©galement trÃ¨s chers. Franchement, les tarifs sont vraiment Ã©levÃ©s par rapport Ã  un hÃ©bergement dâ€™application, donc encore une fois un dev trouvera mieux ailleurs. En revanche pour quelquâ€™un qui nâ€™est pas dÃ©veloppeur ce nâ€™est pas la mÃªme histoire.

## Pour un non dev

Quand on a pas la capacitÃ© de dÃ©velopper soit mÃªme, ces outils sont juste gÃ©niaux et permettent de rÃ©aliser Ã  peu prÃªt tout ce quâ€™on peut faire sur le web. On peut faire un site web, une application mobile, des base de donnÃ©es relationnelle ou non, tout un paquet dâ€™automatisations pour faire le lien entre les diffÃ©rents outils. Cela ouvre des perspectives incroyable pour quelquâ€™un qui veut lancer son idÃ©e ou pour les entreprises qui veulent automatiser certain process sans passer par la case dev. Câ€™est pour cela que le coÃ»t de ses plateformes est Ã©levÃ©. Câ€™est parce que la valeur se trouve dans les opportunitÃ©s quâ€™elles ouvrent et dans lâ€™optimisation des coÃ»t quelles proposent. MÃªme si il faut payer 3 abonnements sur trois outils diffÃ©rents pour son projet on sera toujours trÃ¨s loin du coÃ»t du salaire dâ€™un seul dÃ©veloppeur mÃªme junior. Le prix va cependant vite exploser et les limitations se faire sentir si le service doit Ãªtre customisÃ© ou rÃ©pondre Ã  des problÃ©matiques de charge particuliÃ¨re. Mais si cela arrive câ€™est que le produit/service se vends et quâ€™il est tant dâ€™internalisÃ© le dÃ©veloppement.

Quand on n'a pas les compÃ©tences pour dÃ©velopper soi-mÃªme, ces outils, sont juste gÃ©niaux et permettent de rÃ©aliser Ã  peu prÃ¨s tout ce quâ€™on peut faire sur le web. On peut faire un site web, une application mobile, des bases de donnÃ©es relationnelles ou non, tout un paquet dâ€™automatisations pour faire le lien entre les diffÃ©rents outils. Cela ouvre des perspectives incroyables pour quelquâ€™un qui veut lancer son idÃ©e ou pour les entreprises qui veulent automatiser certains process internes sans passer par la case Ã©quipe de dÃ©veloppement. Câ€™est pour cela que le coÃ»t de ces plateformes est Ã©levÃ©. Câ€™est parce que la valeur se trouve dans les opportunitÃ©s quâ€™elles ouvrent et dans lâ€™optimisation des coÃ»t qu'elles proposent. MÃªme s'il faut payer 3 abonnements sur trois outils diffÃ©rents pour son projet, on sera toujours trÃ¨s loin du coÃ»t du salaire dâ€™un seul dÃ©veloppeur, mÃªme junior. Le prix va cependant vite exploser et les limitations se faire sentir si le service doit Ãªtre customisÃ© ou rÃ©pondre Ã  des problÃ©matiques de charge particuliÃ¨re. Mais si cela arrive, câ€™est que le produit/service se vend et il sera encore temps dâ€™internaliser le dÃ©veloppement.

Devant ce constat, je vais tenter une nouvelle expÃ©rience avec le No Code. Ma premiÃ¨re approche a Ã©tÃ© dâ€™utiliser ses outils pour faire ce que je pouvais faire facilement et avec plaisir moi-mÃªme. En revanche, je ne suis pas un grand fan du CSS et le dÃ©veloppement front Ã  tendance Ã  vite me saouler. Je pense donc tenter de refaire un front pour une de mes applications en passant par mon API. Je ferai un retour dans un prochain post pour vous raconter tout Ã§a. Câ€™est le seul intÃ©rÃªt pour lâ€™instant que je vois pour moi, me faire gagner du temps sur ce que je nâ€™aime pas trop faire et me permettre de me concentrer sur mes forces.

## L'avenir du No Code

Il faut Ãªtre honnÃªte avec son accessibilitÃ© et la puissance qu'offre le No Code aujourdâ€™hui, il va se dÃ©velopper Ã  fond. Toutes les plateformes No Code ouvrent lâ€™accÃ¨s Ã  la crÃ©ation autour du web Ã  un bien plus large public. Dans le monde actuel cela rÃ©pond Ã  un enjeu stratÃ©gique sur la transition numÃ©rique des entreprises. De plus, le No Code en tant que tel nâ€™est pas nouveau. Ce qui a fait exploser les CMS il y a quelques annÃ©es, câ€™est justement la possibilitÃ© de permettre Ã  des non-techs de maintenir leur site et de gÃ©rer leur propre contenu. Ces outils ne sont que lâ€™Ã©volution de ce qui se faisait dÃ©jÃ , mais Ã  une tout autre Ã©chelle et en mode SaaS.

## Danger ou opportunitÃ©

Dans la communautÃ© des dÃ©veloppeurs, ce quâ€™on peut dire, câ€™est que le No Code nâ€™est pas apprÃ©ciÃ©. Je trouve quâ€™il y a une rÃ©action extrÃªme et dÃ©daigneuse de la part de la communautÃ©. Câ€™est vrai que cela ouvre les portes Ã  la crÃ©ation dâ€™application aux personnes qui ne sont pas dÃ©veloppeur. Ils peuvent maintenant se passer de nous pour beaucoup de choses. Mais nâ€™est-ce pas lÃ  la raison dâ€™Ãªtre de lâ€™informatique en gÃ©nÃ©ral. Permettre Ã  de plus en plus de personnes de bÃ©nÃ©ficier, de maÃ®triser les nouvelles technologies et de crÃ©er par elle-mÃªme.

Il y a peut-Ãªtre une peur de se faire remplacer par nâ€™importe qui sachant utiliser ces outils et de devenir obsolÃ¨te. Ã€ mon sens, ces craintes sont infondÃ©es. PremiÃ¨rement, parce quâ€™il faut bien coder ces outils. DeuxiÃ¨mement, parce que le monde de dÃ©veloppement ne se limite pas quâ€™au web, il y a beaucoup dâ€™opportunitÃ©s dans dâ€™autres domaines. Et enfin parce quâ€™il y aura toujours besoin dâ€™un dÃ©veloppement spÃ©cifique et pointu dans certains cas et il faudra des experts pour assurer Ã  ce niveau. Il se peut que dans un avenir proche le No Code deviennent la norme pour une grande partie des applications pour lesquelles il offre une couverture fonctionnelle suffisante, tout comme Wordpress est hyper prÃ©sent dans lâ€™univers du web.

Il peut Ãªtre Ã  la fois une menace pour tout un pan de la profession. Je pense aux dÃ©veloppeurs juniors qui auront moins dâ€™opportunitÃ©s puisque les missions quâ€™on leur confÃ©rait seront remplacÃ©es par ses outils. Je pense aux dÃ©veloppeurs qui nâ€™ont pas suffisamment dÃ©veloppÃ© leurs compÃ©tences. Ils ne pourront pour aller travailler sur des projets qui ne sont pas adaptÃ©s au No Code et seront remplacÃ©s.

Il peut Ã©galement Ãªtre une opportunitÃ©. En effet tout le monde ne pas se mettre Ã  faire du No Code et il faudra des spÃ©cialistes dans ce domaine pour prendre en main les intÃ©grations. Ce seront sÃ»rement les nouveaux mÃ©tiers de demain (nocoder ou maker ğŸ¤”). Les dÃ©veloppeurs pourront facilement embrasser ce changement avec en plus la vision dâ€™un dev et la connaissance des technos sous-jacente (beaucoup dâ€™outils No Code permettent de coder pour la customisation). 

Je peux me tromper, bien Ã©videmment, mais le monde du dÃ©veloppement web et peut-Ãªtre en train de vivre ce que beaucoup de secteurs ont vÃ©cu avec lâ€™arrivÃ© de lâ€™informatique. Câ€™est-Ã -dire moins de personne pour rÃ©aliser une tÃ¢che et surtout un niveau dâ€™abstraction qui monte, permettant de rÃ©aliser des tÃ¢ches complexes avec moins de connaissance technique.

## Evolution du mÃ©tier de dÃ©veloppeur

Au final, ne peut-on pas voir le No Code comme une Ã©volution de notre mÃ©tier ? Un nouveau niveau dâ€™abstraction dans le monde de la programmation. Si on y regarde de plus prÃ©s lâ€™intÃ©gration des diffÃ©rents outils via des API, le fait de rÃ©aliser une application front, de gÃ©rer sa DB et mettre en place ses rÃ¨gles mÃ©tiers pour lâ€™automatisation est assez proche de ce que lâ€™on fait en dÃ©veloppant. Il faut simplement beaucoup moins de connaissance technique pour y parvenir.

Si on rÃ©flÃ©chi, câ€™est un peu la mÃªme chose quâ€™avec les Ã©volutions des langages eux mÃªme. En regardant un dÃ©veloppeur web aujourdâ€™hui, ce souci t-il de lâ€™occupation mÃ©moire des donnÃ©es quâ€™il manipule. Est-ce quâ€™il doit explicitement libÃ©rer cette mÃªme mÃ©moire lorsquâ€™il ne lâ€™utilise plus ? Les derniÃ¨res gÃ©nÃ©rations de langage de programmation ont Ã©galement abstrait bon nombre de concept de base. Au point que beaucoup de dÃ©veloppeurs nâ€™ont mÃªme pas besoin de comprendre comment fonctionne un ordinateur pour le programmer. Câ€™Ã©tait impensable pour pouvoir dÃ©velopper dans les premiÃ¨res gÃ©nÃ©rations de langage.

Au final quâ€™on pensÃ© les dÃ©veloppeurs qui codaient en assembleur quand le, C est arrivÃ©s ? Et que pensent les dÃ©veloppeurs C quand ils voient du JavaScript ? Il est possible de rÃ©aliser de programme en JavaScript sans mÃªme comprendre le dÃ©but pourquoi du comment fonctionne un ordinateur et un systÃ¨me dâ€™exploitation. Est-ce que cela fait des dÃ©veloppeurs JS de mauvais dÃ©veloppeurs ?

Bien que le niveau dâ€™abstraction des langages ait augmentÃ© avec le temps, le C et lâ€™assembleur nâ€™ont pas disparu. Ils sont la base de beaucoup de choses dans l'informatique d'aujourd'hui. Ils sont devenus des langages ultra spÃ©cifiques Ã  des domaines prÃ©cis oÃ¹ aucun autre ne peut prÃ©tendre rÃ©pondre mieux au besoin. Ils sont les outils de dÃ©veloppeurs qui ont acquis une expertise pointue dans les domaines qui les nÃ©cessite.

Pour conclure, si on repense Ã  lâ€™introduction de Robert C.Martin dans Clean Code, on trouve justement un chapitre qui parle de la montÃ©e en niveau dâ€™abstraction de nos langages de programmation. Lâ€™objectif Ã©tant de permettre Ã  de plus en plus de monde de se servir de lâ€™outil informatique en exploitant toujours mieux sa puissance. Le No Code est peut-Ãªtre, tout simplement, ce qui s'approche le plus aujourd'hui du prochain niveau de code.
